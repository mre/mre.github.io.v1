---
layout: post
title: "Tools"
featured: true
published: false
---

Computer science is infected by religious flamewars.

While I get, that arguments about technical topics can be healthy, flamewars are not. I'm sick of it.
I'm fed up by people telling me that their work environment is better,
faster and so on. Your equipment plays a supporting role. You don't even need
a computer to do computing. Donald Knuth writes algorithms on a
notebook. Alan Turing wrote the first chess computer on a piece of
paper. And it worked. Beat that!

For an average user, the next best system is probably good enough. Just a few bucks and you get a modest computer. Normal people want to do the following tasks: Surf the web, chat, archive photos, write documents, listen to music and probably watch movies. That's about it. You can do that with a Pentium IV, 256 MB RAM and any recent Operating System (you will almost certainly get all that for free). Heck, you can use your old Commodore for that. Computers have been mature and reliable enough to do all that for ages. There's really no need to upgrade your system for Farmville, just like there's no reason to buy a new car if the old one works perfectly well. When it comes to software, many of us still use Office 2000 or Photoshop 8 or VisiCalc without feeling the urge to get a newer version in the near future.

Professionals find themselves in a similar situation. Well, maybe we invest more money but still our hardware is incredibly cheap compared to our salary (hopefully). Nothing is perfect but most of the time *it just works*. We are still using slightly modified descendendants of programming languages from computing stone-age. You can get your work done with any of them and I rather have a solid but imperfect programming language today than a *perfect* one sometime in the future. Even if you're doing numerical computing for NASA, your basic work environment is a black box running a text editor or an IDE.

I don't care what *you* are using to get things done. Find an environment that suits *your* needs and be happy with it. Maybe you use Emacs on a Lemote Yeelong netbook (hello Richard Stallman) or Vim on your workstation. It's basically the same thing: A text editor running on a piece of metal. 
You're not a worse programmer if you use Nano, ed or TextMate. Notepad works just fine, too. Real programmers could even use [Butterflies to code][3]It has basically all you need. It loads files, saves files and lets you even edit them in between. That's a hell lot more functionality than Bill Gates and Paul Allen had when they wrote a BASIC interpreter for the Altair. If you find something you're happy with, just stick with it but don't start arguing. It really isn't worth your time.

Don't feed the trolls. Don't fall into the old FreeBSD vs. Linux vs. Windows vs. mum cliché. Instead talk about your code. Let's look at your problem solving skills. Don't be emotional. Be pragmatic.

> "Talk is cheap. Show me the code." - [Linus Torvalds][1]

Java? Fine. Visual Basic? Great! Scala, Cobol, PHP, C++? All fine. Write in Assembler or lolcode. Don't mourn about the fact that language X is missing feature Y. Write a library or use something different. Stop saying JavaScript is a toy language. It just doesn't fit your needs. Instead show me your Lisp adventure game. Write an interpreter for Brainfuck.

Zed A. Shaw puts it quite nicely in the afterword to "Learn Python the hard way":

> I have been programming for a very long time. So long that it is incredibly boring to me. At the time that I wrote this book I knew about 20 programming languages and could learn new ones in about a day to a week depending on how weird they were. Eventually though this just became boring and couldnÕt hold my interest.What I discovered after this journey of learning was that the languages didnÕt matter, it was what you did with them. Actually, I always knew that, but I'd get distracted by the languages and forget it periodically. Now I never forget it, and neither should you.The programming language you learn and use does not matter. Do not get sucked into the religion surrounding programming languages as that will only blind you to their true purpose of being your tool for doing interesting things.

Concerning PHP, [nir][2] wrote on Hackernews:
> Any idiot can write a snarky comment about PHP. Very few get to write code that has anywhere near the impact it had.

My MacBook serves me as a good tool. If something "better" comes around I would switch right away. I've ditched Firefox after five years just because Chrome is faster and I will throw out Chrome with a happy smile when something even faster comes around.
Vim is *quite good* in my opinion but if there's a faster way to do things I'm happy to dump it. But I'm not sure this will happen any time soon. It's reasonably stable and convenient. 
In fact, when you write a piece of software, what you should strive for is *quite good* software and what you really need to accomplish is *good enough* software to make your users happy. The point is: don't get sentimental or religious. Instead get your hands dirty and fix the problems or craft something new.
Don't get emotional for any tool you use. An iPhone - I'm sorry to disappoint you -  is just a phone. No magic. No "think different". "But it's evil!", the ether says, "it's not open source". Well, Android just exists because Google needed to rapidly develop a mobile platform. It's simply part of their business. There is no moral behind that. Google is a yet another company just like Apple or Microsoft.

 
[1]: http://lkml.org/lkml/2000/8/25/132
[2]: http://news.ycombinator.com/item?id=2282523
[3]: http://xkcd.com/378/
