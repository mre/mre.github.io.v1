<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:atom="http://www.w3.org/2005/Atom"
	xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
	xmlns:slash="http://purl.org/rss/1.0/modules/slash/"
	>

<channel>
	<title>Matthias Endler</title>
	<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
	<link></link>
	<description>Liquid error: private method `gsub' called for nil:NilClass</description>
	<lastBuildDate>2011-02-17T10:38:38+01:00</lastBuildDate>
	<generator>http://github.com/mojombo/jekyll</generator>
	<language>en</language>
	<sy:updatePeriod>hourly</sy:updatePeriod>
	<sy:updateFrequency>1</sy:updateFrequency>

		
	<item>
		<title>Digg &ndash; a case study for the social web</title>
		<link>/2010/Digg-a-case-study-for-the-social-web</link>
		<pubDate>2010-10-27T00:00:00+02:00</pubDate>
		<dc:creator>Matthias Endler</dc:creator>
		<guid isPermaLink="false">/2010/Digg-a-case-study-for-the-social-web</guid>
		<description><![CDATA[ <p>We are only at the beginning of a personal web. Presently social communities are humble... [...]]]>
		</description>
			<content:encoded><![CDATA[<p>We are only at the beginning of a personal web. Presently social communities are humble experiments with lots of room for improvement. Twitter, Facebook, MySpace they all made failures along the way. They test different approaches to filter, personalize and rate the endless stream of information and it&#8217;s just natural that they don&#8217;t get it right the first time.</p>

<p>The tricky part is to gain new users while making sure that longtime members won&#8217;t opt-out. A few minor changes can lead to a hazardous outcry and a persistent loss of faith in the platform. Just recently the social-bookmarking site <a href='http://www.digg.com'>Digg</a> suffered from these powerful group dynamics.</p>

<h3 id='taking_the_wrong_way'>Taking the wrong way</h3>

<p>In the beginning the site had a strong focus on tech news. It played an important role for the geek and hacker culture. People posted the <a href='http://en.wikipedia.org/wiki/AACS_encryption_key_controversy'>AACS encryption key</a> on that page and <a href='http://www.zdnet.com/blog/web2explorer/interview-with-digg-founder-kevin-rose-part-1/108'>shared photos from Paris Hilton&#8217;s hacked phone</a>. But in order to grow, they opened up to a broader audience featuring news about sports and politics. Diggs&#8217; reputation as an authority on tech news suffered from that move<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p>Experiencing high pressure from a close-knit community they strived to innovate, creating a huge plan to reinvent web-publishing which turned out to be a misguided strategy. They&#8217;ve made the rating system too complex and opaque, removed important features (like the <em>upcoming</em> section and the <em>bury</em>-button) ignoring their loyal user base that favored grassroots democracy and disliked the extensive modifications.</p>

<p>That said, Diggs intentions were honorable. In order to deal with the ever-increasing demand, they&#8217;ve created a sophisticated distributed system powered by a non-relational database (Cassandra) and a personal front-end called <em>My news</em>. When <a href='http://www.youtube.com/watch?v=jk0RS_x37uk&amp;fmt=35'>Kevin Rose explained the new system</a>, I was quite enthusiastic. But the (database) transition was not flawless and the focus on <em>mainstream outlets</em> was in my opinion a bit misguided. Some former power users even <a href='http://ltgenpanda.tumblr.com/post/1403230157/did-digg-game-its-own-system-to-benefit-publisher'>speculated whether Digg became a promotion platform for newspapers</a>. While these accusations <a href='http://about.digg.com/blog/info-site-changes-and-test-accounts'>may be wrong</a>, it shows the core problem: Proficient users don&#8217;t trust Digg anymore.</p>

<p>On the Digg comment thread to the above story, <a href='http://digg.com/news/technology/did_digg_game_its_own_system_to_benefit_publisher_partners/20101026024734:93bb47f471bc4cd297c0bec69ea49bb5#20101026060300:141ffa4c70b94f75a1b279036d230bcf'><em>endersgame</em> put it like this</a>:</p>

<blockquote>
<p>Since the launch of v4, Digg has lost all credibility and believe it or not that is very important. The reason Reddit is so successful is because the users feel like they are a part of the site. They feel like they have direct control over how the site works.</p>
</blockquote>

<p>Take away the upper twenty percent of contributors to any <em>social</em> web-app and all that remains is a wasteland of shallow stories and comments &#8212; web mediocracy. On an aggregate news site like Digg, this could mean that the stories are already a few days old when they hit the front page. Therefore lively discussions &#8211; the main product of crowd sourcing &#8211; take place on other websites. Fewer comments lead to fewer visits which lead to even fewer comments. A vicious circle that eventually destroys a great community. So maybe Digg took the wrong way but I really hope they can recover. A lighter, more transparent version might be the answer.</p>

<h3 id='up_next'>Up next</h3>

<p>After seeing all this happen to Digg I&#8217;m curious if <a href='http://www.reddit.com'>Reddit</a> and <a href='http://news.ycombinator.com'>Hacker news</a> can cope with the upcoming traffic explosion<sup id='fnref:2'><a href='#fn:2' rel='footnote'>2</a></sup>. While the former is a respectable bookmarking platform, I personally prefer the latter for the profound discussons on technical topics. Basically it&#8217;s a single table with links to great ideas and inspiring projects. In contrast to many other social bookmarking sites, there is a lot less <em>comment noise</em> (although the babel/visitors ratio may be roughly as high as on <a href='http://www.reddit.com/r/programming/'>/r/programming</a>). The hive mind recognizes most trolling attempts. The filter systems are not perfect but quite good.</p>

<h3 id='lessons_learned'>Lessons learned</h3>

<p>All websites are constantly exposed to the whims of their users but tech sites &#8211; with a lot of their regular visitors being geeks and hackers &#8211; have a particularly difficult position. Hacking is all about learning from others and making contributions to the community. It is about game mechanics, curiosity and reputation &#8211; not money. A hacker notices when his skills are abused &#8211; and moves on. These are the reasons why hackers are happy to answer questions on <a href='http://www.stackoverflow.com'>StackOverflow</a> but shy away from <a href='http://www.experts-exchange.com/'>ExpertsExchange</a>.</p>

<p>Create a fair, simple, open system and hackers will bring the rest. That&#8217;s what Paul Graham did with Hacker News. He looked at some existing social bookmarking sites like Reddit, ripped out all the superfluous parts and iterated from there. Revenue was never on the todo list. No shiny design, no pictures, no videos, no media outlets. It has the flair of an early <a href='http://www.slashdot.com'>Slashdot</a>.</p>

<p>It&#8217;s an <em>Anti-Digg</em> if you want. It makes <a href='http://www.codinghorror.com/blog/2010/09/go-that-way-really-fast.html'>lots of minor changes</a> instead of abruptly releasing a whole new system like Digg did with v4. It&#8217;s pure <a href='http://en.wikipedia.org/wiki/KISS_principle'>KISS</a>. A minimalist approach to social bookmarking. It does not <em>try</em> to be popular. In fact most regular visitors would be happy if it stays small<sup id='fnref:3'><a href='#fn:3' rel='footnote'>3</a></sup>.</p>

<p>But rest assured there are roadblocks ahead. While the community will grow, quality of content is endangered to go south. Let&#8217;s see how long this will work out<sup id='fnref:4'><a href='#fn:4' rel='footnote'>4</a></sup>.</p>
<div class='footnotes'><hr /><ol><li id='fn:1'>
<p>Facebook was in a similar situation when they opened for non-students. But in contrast to Digg the outcome was not fatal (actually quite fertile).</p>
<a href='#fnref:1' rev='footnote'>&#8617;</a></li><li id='fn:2'>
<p>Subreddits are quite nice to canalize the information overflow. I propose such a system for HN looking at the increasing number of news that make the front page.</p>
<a href='#fnref:2' rev='footnote'>&#8617;</a></li><li id='fn:3'>
<p>It was initially a side project to test an experimental programming language called Arc.</p>
<a href='#fnref:3' rev='footnote'>&#8617;</a></li><li id='fn:4'>
<p>Presently I&#8217;m quite happy even though I&#8217;m spending more and more time on <a href='http://hckrnews.com/'>alternative</a> <a href='http://metaoptimize.com/projects/autotag/hackernews/'>interfaces</a>.</p>
<a href='#fnref:4' rev='footnote'>&#8617;</a></li></ol></div>
]]></content:encoded>
		</item>
	
	<item>
		<title>Importing old Wordpress backups into Intense Debate</title>
		<link>/2010/intense-debate</link>
		<pubDate>2010-10-14T00:00:00+02:00</pubDate>
		<dc:creator>Matthias Endler</dc:creator>
		<guid isPermaLink="false">/2010/intense-debate</guid>
		<description><![CDATA[ <p>My new blog is pretty much up and running now. The only thing I was... [...]]]>
		</description>
			<content:encoded><![CDATA[<p>My new blog is pretty much up and running now. The only thing I was missing were my old comments I had lying around in a <code>MySQL</code> dump from my old Wordpress blog I made quite a few years ago.</p>

<p>An entry of the dump looks like this (in fact there&#8217;s one database entry per line which makes parsing easier):</p>
<table class='highlighttable'><tr><td class='linenos'><div class='linenodiv'><pre><code class='sql'>1
2
3
4
5
6
7</code></pre></div></td><td class='code'><div class='highlight'><pre><span class='k'>INSERT</span> <span class='k'>INTO</span> <span class='o'>`</span><span class='n'>wp_comments</span><span class='o'>`</span> <span class='k'>VALUES</span> <span class='p'>(</span><span class='mi'>6</span><span class='p'>,</span> <span class='mi'>41</span><span class='p'>,</span> <span class='s1'>&#39;mre&#39;</span><span class='p'>,</span> 
<span class='s1'>&#39;matthias-endler@gmx.net&#39;</span><span class='p'>,</span> <span class='s1'>&#39;http://www.matthias-endler.de&#39;</span><span class='p'>,</span> 
<span class='s1'>&#39;89.51.251.189&#39;</span><span class='p'>,</span> <span class='s1'>&#39;2006-09-20 17:09:38&#39;</span><span class='p'>,</span> <span class='s1'>&#39;2006-09-20 15:09:38&#39;</span><span class='p'>,</span> 
<span class='s1'>&#39;Thx. Took me about three hours to get everything together. </span>
<span class='s1'>Good to see that it was worthwhile.&#39;</span><span class='p'>,</span> <span class='mi'>0</span><span class='p'>,</span> <span class='s1'>&#39;1&#39;</span><span class='p'>,</span> <span class='s1'>&#39;Mozilla/5.0 </span>
<span class='s1'>(X11; U; Linux i686; de; rv:1.8.0.7) Gecko/20060909 Firefox/1.5.0.7&#39;</span><span class='p'>,</span> 
<span class='s1'>&#39;&#39;</span><span class='p'>,</span> <span class='mi'>0</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>)</span> <span class='p'>;</span> 
</pre></div>
</td></tr></table>
<p>(I can&#8217;t believe how long ago it is. I was using Firefox 1.5 at that time&#8230;at least it was faster back than ^^)</p>

<p>At present <a href='http://www.intensedebate.com'>Intense Debate</a> only offers a comment import feature for <em>existing</em> Wordpress blogs. But luckily Jay Graves over at <a href='http://www.socialistsoftware.com'>Socialist Software</a> offers a nice Python script that can <a href='http://www.socialistsoftware.com/post/intense-debate-import-hack/'>send the comments to their system</a>. I&#8217;ve created a Python 3.1 version of it:</p>
<table class='highlighttable'><tr><td class='linenos'><div class='linenodiv'><pre><code class='python'> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31</code></pre></div></td><td class='code'><div class='highlight'><pre><span class='kn'>import</span> <span class='nn'>urllib</span><span class='o'>,</span> <span class='nn'>urllib.request</span><span class='o'>,</span> <span class='nn'>urllib.error</span><span class='o'>,</span> <span class='nn'>urllib.parse</span>

<span class='k'>def</span> <span class='nf'>postComment</span><span class='p'>(</span><span class='n'>blogpostid</span><span class='o'>=</span><span class='s'>&quot;&quot;</span><span class='p'>,</span> <span class='n'>acctid</span><span class='o'>=</span><span class='s'>&quot;&quot;</span><span class='p'>,</span> <span class='n'>anonName</span><span class='o'>=</span><span class='s'>&quot;&quot;</span><span class='p'>,</span> <span class='n'>anonEmail</span><span class='o'>=</span><span class='s'>&quot;&quot;</span><span class='p'>,</span> 
                <span class='n'>anonURL</span><span class='o'>=</span><span class='s'>&quot;&quot;</span><span class='p'>,</span> <span class='n'>comment</span><span class='o'>=</span><span class='s'>&quot;&quot;</span><span class='p'>):</span>
    <span class='c'># &quot;127889&quot; # id test page blogpostid</span>
    <span class='c'># &quot;1762&quot; # id test page acctid</span>

    <span class='n'>server</span> <span class='o'>=</span> <span class='s'>&quot;http://www.intensedebate.com/js/commentAction/&quot;</span>
    <span class='n'>data</span> <span class='o'>=</span> <span class='s'>&#39;{&quot;request_type&quot;:&quot;0&quot;, &quot;params&quot;:{    </span><span class='se'>\</span>
<span class='s'>        &quot;firstCall&quot;:true,                      </span><span class='se'>\</span>
<span class='s'>        &quot;src&quot;:0,                               </span><span class='se'>\</span>
<span class='s'>        &quot;blogpostid&quot;:</span><span class='si'>%s</span><span class='s'>,                       </span><span class='se'>\</span>
<span class='s'>        &quot;acctid&quot;:</span><span class='si'>%s</span><span class='s'>,                           </span><span class='se'>\</span>
<span class='s'>        &quot;parentid&quot;:0,                          </span><span class='se'>\</span>
<span class='s'>        &quot;depth&quot;:0,                             </span><span class='se'>\</span>
<span class='s'>        &quot;type&quot;:0,                              </span><span class='se'>\</span>
<span class='s'>        &quot;token&quot;:&quot;&quot;,                            </span><span class='se'>\</span>
<span class='s'>        &quot;anonName&quot;:&quot;</span><span class='si'>%s</span><span class='s'>&quot;,                       </span><span class='se'>\</span>
<span class='s'>        &quot;anonEmail&quot;:&quot;</span><span class='si'>%s</span><span class='s'>&quot;,                      </span><span class='se'>\</span>
<span class='s'>        &quot;anonURL&quot;:&quot;</span><span class='si'>%s</span><span class='s'>&quot;,                        </span><span class='se'>\</span>
<span class='s'>        &quot;userid&quot;:undefined,                    </span><span class='se'>\</span>
<span class='s'>        &quot;token&quot;:&quot;undefined&quot;,                   </span><span class='se'>\</span>
<span class='s'>        &quot;mblid&quot;:&quot;&quot;,                            </span><span class='se'>\</span>
<span class='s'>        &quot;tweetThis&quot;:&quot;F&quot;,                       </span><span class='se'>\</span>
<span class='s'>        &quot;comment&quot;:&quot;</span><span class='si'>%s</span><span class='s'>&quot;}}&#39;</span>                      \
        <span class='o'>%</span> <span class='p'>(</span><span class='n'>blogpostid</span><span class='p'>,</span> <span class='n'>acctid</span><span class='p'>,</span> <span class='n'>anonName</span><span class='p'>,</span> <span class='n'>anonEmail</span><span class='p'>,</span> <span class='n'>anonURL</span><span class='p'>,</span> <span class='n'>comment</span><span class='p'>)</span>
    <span class='n'>params</span> <span class='o'>=</span> <span class='n'>urllib</span><span class='o'>.</span><span class='n'>parse</span><span class='o'>.</span><span class='n'>urlencode</span><span class='p'>({</span><span class='s'>&#39;data&#39;</span><span class='p'>:</span> <span class='n'>data</span><span class='p'>})</span>
    <span class='k'>try</span><span class='p'>:</span>
        <span class='n'>f</span> <span class='o'>=</span> <span class='n'>urllib</span><span class='o'>.</span><span class='n'>request</span><span class='o'>.</span><span class='n'>urlopen</span><span class='p'>(</span><span class='s'>&quot;</span><span class='si'>%s</span><span class='s'>?</span><span class='si'>%s</span><span class='s'>&quot;</span> <span class='o'>%</span> <span class='p'>(</span><span class='n'>server</span><span class='p'>,</span> <span class='n'>params</span><span class='p'>))</span>
    <span class='k'>except</span> <span class='ne'>IOError</span> <span class='k'>as</span> <span class='n'>error</span><span class='p'>:</span>
        <span class='k'>print</span><span class='p'>(</span><span class='s'>&quot;</span><span class='si'>%s</span><span class='se'>\n</span><span class='si'>%s</span><span class='s'>&quot;</span> <span class='o'>%</span> <span class='p'>(</span><span class='n'>error</span><span class='o'>.</span><span class='n'>code</span><span class='p'>,</span> <span class='n'>error</span><span class='o'>.</span><span class='n'>read</span><span class='p'>()))</span>
</pre></div>
</td></tr></table>
<p>Finally I wrote a parser for the <code>SQL</code> dump of my old blog and used the code above to send the extracted comments to Intense Debate:</p>
<table class='highlighttable'><tr><td class='linenos'><div class='linenodiv'><pre><code class='python'> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63</code></pre></div></td><td class='code'><div class='highlight'><pre><span class='kn'>import</span> <span class='nn'>intensedebate</span>

<span class='k'>def</span> <span class='nf'>main</span><span class='p'>():</span>
    <span class='nb'>file</span> <span class='o'>=</span> <span class='nb'>open</span><span class='p'>(</span> <span class='s'>&quot;dump.sql&quot;</span><span class='p'>,</span> <span class='n'>encoding</span><span class='o'>=</span><span class='s'>&quot;utf-8&quot;</span><span class='p'>)</span> 
    
    <span class='n'>id_old</span>  <span class='o'>=</span> <span class='mi'>123</span>       <span class='c'># Post id from old Wordpress blog</span>
    <span class='n'>id_new</span>  <span class='o'>=</span> <span class='mi'>12345678</span>  <span class='c'># Intense Debate post id found in firebug DOM</span>
    <span class='n'>id_acct</span> <span class='o'>=</span> <span class='mi'>123456</span>    <span class='c'># Intense Debate account id. Get it with firebug</span>
    
    <span class='k'>for</span> <span class='n'>comment</span> <span class='ow'>in</span> <span class='n'>comments</span><span class='p'>(</span><span class='nb'>file</span><span class='p'>,</span> <span class='n'>id_old</span><span class='p'>):</span>
    	<span class='n'>intensedebate</span><span class='o'>.</span><span class='n'>postComment</span><span class='p'>(</span><span class='n'>blogpostid</span><span class='o'>=</span><span class='n'>id_new</span><span class='p'>,</span> <span class='n'>acctid</span><span class='o'>=</span><span class='n'>id_acct</span><span class='p'>,</span>  \
            <span class='n'>anonName</span><span class='o'>=</span><span class='n'>comment</span><span class='p'>[</span><span class='s'>&quot;author&quot;</span><span class='p'>],</span> <span class='n'>anonEmail</span><span class='o'>=</span><span class='n'>comment</span><span class='p'>[</span><span class='s'>&quot;email&quot;</span><span class='p'>],</span>   \
            <span class='n'>anonURL</span><span class='o'>=</span><span class='n'>comment</span><span class='p'>[</span><span class='s'>&quot;url&quot;</span><span class='p'>],</span> <span class='n'>comment</span><span class='o'>=</span><span class='n'>comment</span><span class='p'>[</span><span class='s'>&quot;content&quot;</span><span class='p'>])</span>
       	<span class='k'>print</span><span class='p'>(</span><span class='s'>&quot;Posted &quot;</span><span class='p'>,</span> <span class='n'>comment</span><span class='p'>)</span>
        
<span class='k'>def</span> <span class='nf'>comments</span><span class='p'>(</span><span class='nb'>file</span><span class='p'>,</span> <span class='nb'>id</span><span class='p'>):</span>
    <span class='sd'>&#39;&#39;&#39; </span>
<span class='sd'>    Returns next (non-spam) comment </span>
<span class='sd'>    from a wordpress database sql dump </span>
<span class='sd'>    &#39;&#39;&#39;</span>
    
    <span class='c'># Field names of the wp_comments table inside the SQL dump file</span>
    <span class='n'>marker</span><span class='p'>,</span> <span class='n'>post_id</span><span class='p'>,</span> <span class='n'>author</span><span class='p'>,</span> <span class='n'>email</span><span class='p'>,</span> <span class='n'>url</span><span class='p'>,</span> <span class='n'>ip</span><span class='p'>,</span> \
    <span class='n'>date</span><span class='p'>,</span> <span class='n'>date_gmt</span><span class='p'>,</span> <span class='n'>content</span><span class='p'>,</span> <span class='n'>karma</span><span class='p'>,</span> <span class='n'>spam</span> <span class='o'>=</span> <span class='nb'>range</span><span class='p'>(</span><span class='mi'>11</span><span class='p'>)</span>
   
    
    <span class='k'>for</span> <span class='n'>line</span> <span class='ow'>in</span> <span class='nb'>file</span><span class='p'>:</span>
        <span class='c'># Split the line into its field values</span>
        <span class='n'>field</span> <span class='o'>=</span> <span class='n'>line</span><span class='o'>.</span><span class='n'>split</span><span class='p'>(</span><span class='s'>&quot;,&quot;</span><span class='p'>,</span> <span class='mi'>8</span><span class='p'>)</span>
        
        <span class='c'># The comment needs some extra treatment</span>
        <span class='c'># because it can contain commas inside the text:</span>
        <span class='c'># Extract comment from last field in line dump</span>
        <span class='n'>last_field</span> <span class='o'>=</span> <span class='n'>field</span><span class='o'>.</span><span class='n'>pop</span><span class='p'>()</span><span class='o'>.</span><span class='n'>split</span><span class='p'>(</span><span class='s'>&quot;&#39;,&quot;</span><span class='p'>,</span> <span class='mi'>1</span><span class='p'>)</span>
        <span class='n'>comment</span> <span class='o'>=</span> <span class='n'>last_field</span><span class='o'>.</span><span class='n'>pop</span><span class='p'>(</span><span class='mi'>0</span><span class='p'>)</span>
        <span class='c'># Filter spam comments</span>
        <span class='k'>if</span> <span class='s'>&quot;spam&quot;</span> <span class='ow'>in</span> <span class='s'>&#39;&#39;</span><span class='o'>.</span><span class='n'>join</span><span class='p'>(</span><span class='n'>last_field</span><span class='p'>):</span>
            <span class='k'>continue</span> 
        <span class='c'># Put the valid comment into our field list</span>
        <span class='n'>field</span><span class='o'>.</span><span class='n'>append</span><span class='p'>(</span><span class='n'>comment</span><span class='p'>)</span>
        
        <span class='c'># Remove whitespace and unwanted characters</span>
        <span class='n'>field</span> <span class='o'>=</span> <span class='p'>[</span><span class='n'>value</span><span class='o'>.</span><span class='n'>strip</span><span class='p'>(</span><span class='s'>&quot; &#39;&quot;</span><span class='p'>)</span> <span class='k'>for</span> <span class='n'>value</span> <span class='ow'>in</span> <span class='n'>field</span><span class='p'>]</span>
        
        <span class='k'>try</span><span class='p'>:</span>
            <span class='c'># Check if line is entry of wp_comments table</span>
            <span class='k'>if</span> <span class='s'>&quot;wp_comments&quot;</span> <span class='ow'>in</span> <span class='n'>field</span><span class='p'>[</span><span class='n'>marker</span><span class='p'>]:</span>
                <span class='c'># Check if comment is for the right blog post</span>
                <span class='n'>current_id</span> <span class='o'>=</span> <span class='nb'>int</span><span class='p'>(</span><span class='n'>field</span><span class='p'>[</span><span class='n'>post_id</span><span class='p'>])</span>
                <span class='k'>if</span>  <span class='n'>current_id</span> <span class='o'>==</span> <span class='nb'>id</span><span class='p'>:</span>
                    <span class='c'># Return the useful field values</span>
                    <span class='c'># as a dictionary</span>
                    <span class='k'>yield</span> <span class='p'>{</span>
                        <span class='s'>&quot;author&quot;</span><span class='p'>:</span>   <span class='n'>field</span><span class='p'>[</span><span class='n'>author</span><span class='p'>],</span>
                        <span class='s'>&quot;email&quot;</span><span class='p'>:</span>    <span class='n'>field</span><span class='p'>[</span><span class='n'>email</span><span class='p'>],</span>
                        <span class='s'>&quot;url&quot;</span><span class='p'>:</span>      <span class='n'>field</span><span class='p'>[</span><span class='n'>url</span><span class='p'>],</span>
                        <span class='s'>&quot;content&quot;</span><span class='p'>:</span>  <span class='n'>field</span><span class='p'>[</span><span class='n'>content</span><span class='p'>]</span>
                    <span class='p'>}</span>
        <span class='k'>except</span> <span class='ne'>IndexError</span><span class='p'>:</span>
            <span class='k'>pass</span> <span class='c'># Just ignore invalid comments</span>

<span class='k'>if</span> <span class='n'>__name__</span> <span class='o'>==</span> <span class='s'>&quot;__main__&quot;</span><span class='p'>:</span>
    <span class='n'>main</span><span class='p'>()</span>
</pre></div>
</td></tr></table>
<p>That did the trick.</p>
]]></content:encoded>
		</item>
	
	<item>
		<title>Why I love text files</title>
		<link>/2010/why-i-love-text-files</link>
		<pubDate>2010-10-10T00:00:00+02:00</pubDate>
		<dc:creator>Matthias Endler</dc:creator>
		<guid isPermaLink="false">/2010/why-i-love-text-files</guid>
		<description><![CDATA[ <p>Text files are the single most important way we can communicate with computers. It&#8217;s no... [...]]]>
		</description>
			<content:encoded><![CDATA[<p>Text files are the single most important way we can communicate with computers. It&#8217;s no coincidence that they are also the most important way to communicate with other human beings. What we can achieve with text files is invaluable: Write it once and refer to it whenever you want to get the message across in the future. Write a program (it&#8217;s just text), save it and let the machine execute it whenever you like. Write another text file which contains the rules for the execution of your program and the computer runs your program exactly as you specified (<code>cron</code> files do that on Unix).</p>

<p>Text files can be structured in any way you can possibly imagine. Some flavours are <a href='http://www.json.org/'>JSON</a>, <a href='http://daringfireball.net/projects/markdown/'>Markdown</a> and <a href='http://www.w3.org/Graphics/SVG/'>SVG</a>. It&#8217;s all just text. There exist literally a billion of programs and algorithms to access, modify and distribute text files. You can write them with <em>Emacs</em>, print them on a terminal, pipe them through <em>sed</em> and send them via email to a friend who publishes them on the web. Because text files are so important we have good support for them on any computing system. On Unix everything is a file and <em>HTML</em> is just structured text. It&#8217;s a simple and powerful tool to make a contribution to society that outlasts our lifes.</p>

<p>I have a single text file in my mac dockbar which is called <code>TODO.txt</code>. I open it every day and after years of experimenting with different task management apps from simple command line tools to sophisticated online information storage systems I always came back to plain text files. And the explanation is simple: If mankind will still be around a thousand years from now, chances are that plain text files are one of the very few file formats that will still be readable by then<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup>.</p>

<p>They are an incremental part of how we can modify our environment without even leaving our desk. They have no overhead and can contain a single thought or the complete knowledge of our species. Distributing textual information is so vital for us that we permanently develop faster distribution networks &#8211; the fastest by now being the internet.</p>

<p>On the web you have instant access to a virtually endless amount of information and data distributed as plain text files. New web services made accessing the data even easier offering <code>APIs</code> and <code>feeds</code>. You can pull down the data from their servers and make statistics with a programming language of your choice. As you may have noticed, my affinity to text files partially comes from my programming background. As <a href='http://matt.might.net/articles/console-hacks-exploiting-frequency/'>Matt Might</a> correctly points out on his blog:</p>

<blockquote>
<p>The continued dominance of the command line among experts is a testament to the power of linguistic abstraction: when it comes to computing, a word is worth a thousand pictures.</p>
</blockquote>

<p>Whenever you like a text on the web just link to it and create a wonderful chain of ideas. Want to read it later or recommend it to a friend? Just share the text or print it on paper. The fact that we all take such things for granted is a testament for the power of text files and their importance for the <a href='http://en.wikipedia.org/wiki/Information_Age'>information age</a>.</p>
<div class='footnotes'><hr /><ol><li id='fn:1'>
<p>[EDIT] I admit that this paragraph is a bit misleading. I would be happy if my todo file was so important that it has to be readable in a thousand years from now but that&#8217;s not the case. I just like to be sure that <em>I</em> can access it without any special (proprietary) software whenever I want. My <code>TODO.txt</code> is just a personal, transient, disposable storage system (<code>cat TODO.txt | wc -l</code> prints 174 at the moment&#8230;).</p>
<a href='#fnref:1' rev='footnote'>&#8617;</a></li></ol></div>
]]></content:encoded>
		</item>
	
	<item>
		<title>What about Microsoft?</title>
		<link>/2010/what-about-microsoft</link>
		<pubDate>2010-10-09T00:00:00+02:00</pubDate>
		<dc:creator>Matthias Endler</dc:creator>
		<guid isPermaLink="false">/2010/what-about-microsoft</guid>
		<description><![CDATA[ <p>Roughly ten years ago, on October 29, 2001, <a href='http://www.microsoft.com/presspass/ofnote/10-29digitaldecade.mspx'>Bill Gates shared a precise picture... [...]]]>
		</description>
			<content:encoded><![CDATA[<p>Roughly ten years ago, on October 29, 2001, <a href='http://www.microsoft.com/presspass/ofnote/10-29digitaldecade.mspx'>Bill Gates shared a precise picture of the future of computing</a>:</p>

<blockquote>
<p>In the Digital Decade, you&#8217;ll no longer think of the PC as a tool you use only to carry out specific tasks it will become something you come to rely on all the time. The power of the PC will be as ubiquitous and reliable as electricity, and vastly more useful than any single device we use today.</p>
</blockquote>

<p>While previously <a href='http://www.scribd.com/doc/881657/The-Internet-Tidal-Wave'>underestimating the web as a hype</a>, Gates predicted <em>magic</em> things like the <em>iPod</em>, the <em>iPhone</em> and the <em>Blackberry</em> to soon be part of our lives. These are all mobile devices you carry around without ever noticing the embedded computer. You use them just like any other everyday object. Their very nature hides most of the underlying technical details (the operating system) from the user and has a strong focus on apps and content. They just work.</p>

<h3 id='monopoly_on_the_desktop'>Monopoly on the desktop</h3>

<p>In the early 2000s, smart-phones and mass appeal of the web were the logical next steps and Microsoft had every reason to be excited about that. They had <a href='http://www.microsoft.com/presspass/press/2001/Jan01/01-18Q01-2er.mspx'>record breaking revenues</a> and absolute market domination in both operating systems and office products. While the quality of their products has always been a reason for debates they were brilliant when it came down to business: Create decent software, integrate it with other company products and sign persistent contracts with the distributors. That&#8217;s also how they won the <a href='http://en.wikipedia.org/wiki/Browser_wars'>Browser Wars</a> against Netscape making <em>Internet Explorer</em> the de facto gate to web content. For the last 15 years the company grew from a tiny software startup to a billion dollar global player &#8212; and they wanted to be darn sure it stayed that way.</p>

<h3 id='harsh_beginnings'>Harsh beginnings</h3>

<p>When the net really started to gain momentum Microsoft was a bit late to the party like a cumbersome tech guy who&#8217;s watching all the hipsters gettin&#8217; the phone numbers. To tackle the new rivals Microsoft started to mimic the behavior of the already successful guys.</p>

<p>As a reaction on Netscapes JavaScript, the Internet Explorer promoted ActiveX, a proprietary browser plugin that allowed Microsoft to run their own languages JScript and VBScript on every website to offer loyal Windows-Developers a simple development platform for interactive websites. Because of some major security flaws and the fact that it was a Windows-only product, ActiveX soon had a bad reputation amongst developers. Furthermore Microsoft extended the HTML and CSS standards with vendor specific extensions like <code>filters</code> and the <code>marquee</code> element. While other vendors like Mozilla or Opera did the same, the <a href='http://blogs.msdn.com/b/ie/archive/2008/09/08/microsoft-css-vendor-extensions.aspx'>extensions from Microsoft</a> were not HTML and CSS 2.1 compliant, provoking <a href='http://msdn.microsoft.com/en-us/library/ms537634(VS.85).aspx'>syntax validation errors and much anger</a>.</p>

<h3 id='the_platform'>The platform</h3>

<p>The central concept has always been to build an exclusive <em>platform</em>. An area of total control (much like Apple recently). Microsoft was never ashamed to borrow a good idea from its rivals and sell a (locked down) version of its own. They have a track record in creating new document types and protocols (often times inferior to open standards) in order to strengthen the platform. While it seems unethical and has been the bone of contention for quite a few antitrust cases, it&#8217;s totally understandable from a companies&#8217; point of view. By bundling Internet Explorer with every copy of Windows, they made it very hard for Netscape to compete, eventually pushing them out of the market.</p>

<h3 id='playing_catchup'>Playing catch-up</h3>

<p>In parallel they worked on a web portal called MSN (Microsoft Network) &#8212; just like AOL. They later built their own search engine &#8212; to rival Yahoo and created a proprietary chat application named Microsoft Messenger that is much like the successful ICQ. The list goes on and on. Whatever got their attention, they wanted a piece of the cake.</p>

<p>But as hard as Microsoft tried, the new startups had the fresher ideas, the smarter apps, the bigger user-base. Microsoft suddenly was in the role of the underdog. They tried to fight on many fronts at once while constantly failing to use their own creativity to outsmart the antagonists. One piece in the puzzle was always missing: <em>innovation</em>. While the technology was quite mature, some solutions still looked like dull, inferior, blatant copies of successful websites and web-apps that missed the final polish. This mentality lead to many setbacks and dead ends: Their social network <a href='http://www.msnbc.msn.com/id/15011765'>Wallop</a> was a stillbirth, just like MSN Music. More recently the company located in Redmond <a href='http://news.cnet.com/8301-10805_3-10292031-75.html'>shutdown Soapbox and launched MSN Movies to compete with YouTube</a> and other streaming sites but at the moment the site struggles to gain traction.</p>

<h3 id='a_new_development_approach'>A new development approach</h3>

<p>Obviously the web has a lot of characteristics that make Microsoft nervous: Open standards, rapid distribution of software and content, free alternatives to established desktop programs. Part of their initial resentment might come from the fear that the Windows platform &#8211; the operating system including all third-party vendors &#8211; might <em>rapidly</em> become irrelevant. They would have to start anew. So their strategy was (and still seems to be) to make the web more like an extension to their platform, just another part of the Microsoft universe. But their competitive advantage on the desktop is negligible on the internet. Some might even say <em>Microsoft never really grokked the web</em>.</p>

<p>A solution might be to look outside the box and support open standards (like OAuth) and show more commitment to free software. Much like Google which contributes to many important open source projects (Linux and Python) or Facebook which built a free PHP compiler called HipHop, Microsoft could be an active part of the community instead of constantly infiltrating it.</p>

<p>But what are the advantages for Microsoft to rapidly change the development process and give up their precious proprietary platform to create an open environment for the web and mobile devices? This can increase the development speed of large systems and lower the costs, as demonstrated by Google with the open Android platform or Apples WebKit which is used on many browsers (not just their own Safari).</p>

<p>As a site note it&#8217;s interesting to see how Apple gained popularity within the last ten years by gradually moving all their services to the cloud and offering a seamless interface on all their mobile devices. By recruiting droves of loyal developers for iOS development they now have the platform that Microsoft urgently needs. They have made the jump into the web by increasingly blurring the line between local apps and the web.</p>

<p>Keep in mind that success is never guaranteed. Google stopped Wave and Apple had a false start with Ping. But because of the <em>agile</em> development process and the wide variety of innovative products, these roadblocks aren&#8217;t fatal but often times vital. Microsoft needed 14 years to bring Internet Explorer to version 6, Google needed just two for Chrome (and it&#8217;s already faster than IE8&#8230;). Currently Google Instant makes Bing! look like a rusty piece of metal. Sure all that doesn&#8217;t mean Microsoft will disappear any time soon but without innovation any company is doomed to drift into insignificance.</p>

<h3 id='an_open_future'>An open future</h3>

<p>But maybe Microsoft is already working on a more open policy: With their new Internet Explorer 9, <a href='http://edition.cnn.com/2009/TECH/11/19/cnet.internet.explorer.nine/'>Microsoft still has a strong focus on proprietary web technologies like Direct2D</a> and <a href='http://en.wikipedia.org/wiki/Silverlight'>Silverlight</a> but they also pass the Acid3 test for standard compliance and support the new HTML5 <code>canvas</code> and <code>video</code> elements. They have the money and the manpower to shape the next big thing but it will be a hard piece of work and it takes a step back to see that the web is all about open standards and collaboration.</p>

<h3 id='links'>Links</h3>

<ul class='blocklist'>
<li><a href='http://www.fernstrategy.com/2010/10/18/is-microsoft-in-trouble/'>Michael Fern is writing on the same topic</a></li>

<li><a href='http://news.ycombinator.com/item?id=1805621'>Comments on Hackernews</a></li>
</ul>
]]></content:encoded>
		</item>
	
	<item>
		<title>Exporting posts from posterous</title>
		<link>/2010/exporting-posts-from-posterous</link>
		<pubDate>2010-09-17T00:00:00+02:00</pubDate>
		<dc:creator>Matthias Endler</dc:creator>
		<guid isPermaLink="false">/2010/exporting-posts-from-posterous</guid>
		<description><![CDATA[ <p><a href='http://matthiasendler.posterous.com'>Posterous</a> is awesome for great looking blogs without the hassle. It was great to... [...]]]>
		</description>
			<content:encoded><![CDATA[<p><a href='http://matthiasendler.posterous.com'>Posterous</a> is awesome for great looking blogs without the hassle. It was great to have it for posting my thoughts when my old blog was all messed up. Now that I&#8217;ve redesigned it I want to host all my old posts on my new blog, too. Therefore I needed to export them somehow. It&#8217;s a bit strange that the guys from posterous don&#8217;t offer an export button on the configuration page but they help you out with a nice <em>RESTful</em> API that can be used with just about any language.</p>

<p>Here is how a response to a query looks like:</p>
<table class='highlighttable'><tr><td class='linenos'><div class='linenodiv'><pre><code class='xml'> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16</code></pre></div></td><td class='code'><div class='highlight'><pre><span class='nt'>&lt;post&gt;</span> 
  <span class='nt'>&lt;url&gt;</span>http://post.ly/NWNC<span class='nt'>&lt;/url&gt;</span> 
  <span class='nt'>&lt;link&gt;</span>http://matthiasendler.posterous.com/.../link&gt; 
  <span class='nt'>&lt;title&gt;</span>Overkill: Java as a first programming language<span class='nt'>&lt;/title&gt;</span> 
  <span class='nt'>&lt;id&gt;</span>11579710<span class='nt'>&lt;/id&gt;</span> 
  <span class='nt'>&lt;body&gt;</span> 
    <span class='cp'>&lt;![CDATA[&gt;&lt;p&gt;I recently...]]&gt;</span>
  <span class='nt'>&lt;/body&gt;</span> 
  <span class='nt'>&lt;date&gt;</span>Fri, 12 Feb 2010 08:12:00 -0800<span class='nt'>&lt;/date&gt;</span> 
  <span class='nt'>&lt;views&gt;</span>505<span class='nt'>&lt;/views&gt;</span> 
  <span class='nt'>&lt;private&gt;</span>false<span class='nt'>&lt;/private&gt;</span> 
  <span class='nt'>&lt;author&gt;</span>Matthias Endler<span class='nt'>&lt;/author&gt;</span> 
  <span class='nt'>&lt;authorpic&gt;</span>http://files.posterous.com/.../unix_thumb.jpg<span class='nt'>&lt;/authorpic&gt;</span> 
  <span class='nt'>&lt;commentsenabled&gt;</span>true<span class='nt'>&lt;/commentsenabled&gt;</span> 
  <span class='nt'>&lt;commentsCount&gt;</span>0<span class='nt'>&lt;/commentsCount&gt;</span> 
<span class='nt'>&lt;/post&gt;</span>
</pre></div>
</td></tr></table>
<h3 id='grab_your_posts'>Grab your posts</h3>

<p>So off we go with this little PHP snippet that gives you ten of my latest blog posts:</p>
<table class='highlighttable'><tr><td class='linenos'><div class='linenodiv'><pre><code class='php'> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30</code></pre></div></td><td class='code'><div class='highlight'><pre><span class='cp'>&lt;?php</span>
<span class='c1'>// Posterous PHP export. Requires PHP 5.1.0 or newer</span>
<span class='c1'>// Documentation on http://posterous.com/api/reading</span>

<span class='c1'>// Query options</span>
<span class='nv'>$site_id</span> <span class='o'>=</span> <span class='s2'>&quot;&quot;</span><span class='p'>;</span>     <span class='c1'>// Either use id of the site...</span>
<span class='nv'>$hostname</span> <span class='o'>=</span> <span class='s2'>&quot;matthiasendler&quot;</span><span class='p'>;</span> <span class='c1'>// ...or a subdomain</span>
<span class='nv'>$num_posts</span> <span class='o'>=</span> <span class='mi'>10</span><span class='p'>;</span>        <span class='c1'>// Number of posts to read</span>
<span class='nv'>$page</span> <span class='o'>=</span> <span class='mi'>1</span><span class='p'>;</span>                    <span class='c1'>// Get specific page</span>
<span class='nv'>$tag</span> <span class='o'>=</span> <span class='s2'>&quot;&quot;</span><span class='p'>;</span>           <span class='c1'>// Grab posts with these tags</span>

<span class='c1'>// Create query string</span>
<span class='k'>if</span> <span class='p'>(</span><span class='nv'>$site_id</span><span class='p'>)</span>   <span class='nv'>$query</span> <span class='o'>=</span> <span class='nv'>$site_id</span><span class='p'>;</span>
<span class='k'>else</span>            <span class='nv'>$query</span> <span class='o'>=</span> <span class='nv'>$hostname</span><span class='p'>;</span>

<span class='nv'>$query</span> <span class='o'>.=</span> <span class='s2'>&quot;&amp;&quot;</span> <span class='o'>.</span> <span class='nv'>$num_posts</span> <span class='o'>.</span> <span class='s2'>&quot;&amp;&quot;</span> <span class='o'>.</span> <span class='nv'>$page</span><span class='p'>;</span>
<span class='k'>if</span> <span class='p'>(</span><span class='nv'>$tag</span><span class='p'>)</span> <span class='nv'>$query</span> <span class='o'>.=</span> <span class='s2'>&quot;&amp;&quot;</span> <span class='o'>.</span> <span class='nv'>$tag</span><span class='p'>;</span>

<span class='c1'>// Start request</span>
<span class='nv'>$url</span> <span class='o'>=</span> <span class='s2'>&quot;http://posterous.com/api/readposts&quot;</span> <span class='o'>.</span> <span class='nv'>$query</span><span class='p'>;</span>
<span class='nv'>$xml</span> <span class='o'>=</span> <span class='nb'>simplexml_load_file</span><span class='p'>(</span><span class='nv'>$url</span><span class='p'>);</span>
<span class='nv'>$post_count</span> <span class='o'>=</span> <span class='nb'>count</span><span class='p'>(</span><span class='nv'>$xml</span><span class='o'>-&gt;</span><span class='na'>post</span><span class='p'>);</span>

<span class='c1'>// Cumbersome way to walk post entries. </span>
<span class='c1'>// See php.net/manual/de/function.simplexml-load-file.php#86471</span>
<span class='k'>for</span><span class='p'>(</span><span class='nv'>$i</span> <span class='o'>=</span> <span class='mi'>0</span><span class='p'>;</span> <span class='nv'>$i</span> <span class='o'>&lt;</span> <span class='nv'>$post_count</span><span class='p'>;</span> <span class='nv'>$i</span><span class='o'>++</span><span class='p'>)</span> <span class='p'>{</span> 
  <span class='nv'>$post</span> <span class='o'>=</span> <span class='nv'>$xml</span><span class='o'>-&gt;</span><span class='na'>post</span><span class='p'>[</span><span class='nv'>$i</span><span class='p'>];</span> 
  <span class='c1'>// Now you can use $post-&gt;title, $post-&gt;date, $post-&gt;body...</span>
<span class='p'>}</span>
<span class='cp'>?&gt;</span><span class='x' />
</pre></div>
</td></tr></table>
<h3 id='put_it_into_jekyll'>Put it into jekyll</h3>

<p>I wanted to import the posts into jekyll so I used a function to do so. Shove a call to it below <code>line 28</code>:</p>
<table class='highlighttable'><tr><td class='linenos'><div class='linenodiv'><pre><code class='php'> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41</code></pre></div></td><td class='code'><div class='highlight'><pre><span class='cp'>&lt;?php</span>
<span class='sd'>/**</span>
<span class='sd'> * Formats a posterous post as markdown to use it with jekyll</span>
<span class='sd'> * array  $post   The post that gets processed</span>
<span class='sd'> * string $layout The liquid template to use </span>
<span class='sd'> */</span>
 <span class='k'>function</span> <span class='nf'>write_markdown</span><span class='p'>(</span><span class='nv'>$post</span><span class='p'>,</span> <span class='nv'>$layout</span><span class='p'>)</span> <span class='p'>{</span>
	<span class='c1'>// Extract relevant data from $post</span>
	<span class='nv'>$date</span>  <span class='o'>=</span> <span class='nb'>date</span><span class='p'>(</span><span class='s2'>&quot;Y-m-d&quot;</span><span class='p'>,</span> <span class='nb'>strtotime</span><span class='p'>(</span><span class='nv'>$post</span><span class='o'>-&gt;</span><span class='na'>date</span><span class='p'>));</span>
	
	<span class='c1'>// Create filename</span>
	<span class='nv'>$extension</span> <span class='o'>=</span> <span class='s2'>&quot;.mkdn&quot;</span><span class='p'>;</span>
	<span class='nv'>$filename</span> <span class='o'>=</span> <span class='nv'>$date</span> <span class='o'>.</span> <span class='s2'>&quot;-&quot;</span> <span class='o'>.</span> <span class='nb'>strtolower</span><span class='p'>(</span><span class='nv'>$post</span><span class='o'>-&gt;</span><span class='na'>title</span><span class='p'>);</span>
	
	<span class='c1'>// Remove whitespace and special characters from filename</span>
	<span class='nv'>$patterns</span> <span class='o'>=</span> <span class='k'>array</span><span class='p'>(</span><span class='s1'>&#39;/\s/&#39;</span><span class='p'>,</span> <span class='s1'>&#39;/:/&#39;</span><span class='p'>,</span><span class='s1'>&#39;/\(/&#39;</span><span class='p'>,</span><span class='s1'>&#39;/\)/&#39;</span><span class='p'>,</span> <span class='s1'>&#39;/]/&#39;</span><span class='p'>,</span> 
	<span class='s1'>&#39;/\[/&#39;</span><span class='p'>,</span> <span class='s1'>&#39;/!/&#39;</span><span class='p'>,</span> <span class='s1'>&#39;/\?/&#39;</span><span class='p'>,</span> <span class='s1'>&#39;/\+/&#39;</span><span class='p'>,</span> <span class='s1'>&#39;/=/&#39;</span><span class='p'>,</span><span class='s1'>&#39;/\./&#39;</span><span class='p'>,</span> <span class='s1'>&#39;/\&quot;/&#39;</span><span class='p'>,</span> <span class='s1'>&#39;/,/&#39;</span><span class='p'>);</span>
	<span class='nv'>$filename</span> <span class='o'>=</span> <span class='nb'>preg_replace</span><span class='p'>(</span><span class='nv'>$patterns</span><span class='p'>,</span> <span class='s1'>&#39;-&#39;</span><span class='p'>,</span> <span class='nv'>$filename</span><span class='p'>);</span>
	
	<span class='c1'>// Replace multiple dashes with single dash</span>
	<span class='nv'>$filename</span> <span class='o'>=</span> <span class='nb'>preg_replace</span><span class='p'>(</span><span class='s1'>&#39;/--+/&#39;</span><span class='p'>,</span> <span class='s1'>&#39;-&#39;</span><span class='p'>,</span> <span class='nv'>$filename</span><span class='p'>);</span>
	
	<span class='c1'>// Remove possible dash at the end of filename</span>
	<span class='nv'>$filename</span> <span class='o'>=</span> <span class='nb'>trim</span><span class='p'>(</span><span class='nv'>$filename</span><span class='p'>,</span> <span class='s1'>&#39;-&#39;</span><span class='p'>);</span>
	
	<span class='c1'>// We&#39;re good to go. Create a new markdown file</span>
	<span class='nv'>$jekyll_post</span> <span class='o'>=</span> <span class='nb'>fopen</span><span class='p'>(</span><span class='nv'>$filename</span> <span class='o'>.</span> <span class='nv'>$extension</span><span class='p'>,</span> <span class='s1'>&#39;w&#39;</span><span class='p'>);</span>
	<span class='k'>if</span> <span class='p'>(</span><span class='nv'>$jekyll_post</span><span class='p'>)</span> <span class='p'>{</span>
		<span class='c1'>// Jekyll requires a yaml front matter</span>
		<span class='nv'>$yaml</span> <span class='o'>=</span> <span class='s2'>&quot;---</span><span class='se'>\n</span><span class='s2'>&quot;</span> <span class='o'>.</span>
			<span class='s2'>&quot;layout: &quot;</span> <span class='o'>.</span> <span class='nv'>$layout</span>       <span class='o'>.</span> <span class='s2'>&quot;</span><span class='se'>\n</span><span class='s2'>&quot;</span> <span class='o'>.</span>
			<span class='s2'>&quot;title:  &quot;</span> <span class='o'>.</span> <span class='nv'>$post</span><span class='o'>-&gt;</span><span class='na'>title</span>  <span class='o'>.</span> <span class='s2'>&quot;</span><span class='se'>\n</span><span class='s2'>&quot;</span> <span class='o'>.</span>
			<span class='s2'>&quot;---</span><span class='se'>\n</span><span class='s2'>&quot;</span><span class='p'>;</span>
				
		<span class='c1'>// Write front matter, post data and close file</span>
		<span class='nb'>fwrite</span><span class='p'>(</span><span class='nv'>$jekyll_post</span><span class='p'>,</span> <span class='nv'>$yaml</span><span class='p'>);</span>
		<span class='nb'>fwrite</span><span class='p'>(</span><span class='nv'>$jekyll_post</span><span class='p'>,</span> <span class='nv'>$post</span><span class='o'>-&gt;</span><span class='na'>body</span><span class='p'>);</span>
		<span class='nb'>fclose</span><span class='p'>(</span><span class='nv'>$jekyll_post</span><span class='p'>);</span>
	<span class='p'>}</span>
 <span class='p'>}</span>
<span class='cp'>?&gt;</span><span class='x' />
</pre></div>
</td></tr></table>
<p>It&#8217;s generally a good idea to use a HTML to Markdown converter for the post body. There is a nice one for PHP called <a href='http://sourceforge.net/projects/markdownify/'>Markdownify</a> and a python script named <a href='http://www.aaronsw.com/2002/html2text/'>html2text</a>.</p>
]]></content:encoded>
		</item>
	
	<item>
		<title>Sorting speed of STL vectors and lists</title>
		<link>/2010/sorting-speed-of-stl-vectors-and-lists</link>
		<pubDate>2010-02-12T00:00:00+01:00</pubDate>
		<dc:creator>Matthias Endler</dc:creator>
		<guid isPermaLink="false">/2010/sorting-speed-of-stl-vectors-and-lists</guid>
		<description><![CDATA[ <p>This snippet is an addition to my <a href='http://0.0.0.0:4000/2010/howto-sort-a-vector-or-a-list-in-c-using-stl/'>previous article about sorting STL containers</a>. I&#8217;ve... [...]]]>
		</description>
			<content:encoded><![CDATA[<p>This snippet is an addition to my <a href='http://0.0.0.0:4000/2010/howto-sort-a-vector-or-a-list-in-c-using-stl/'>previous article about sorting STL containers</a>. I&#8217;ve tested the sorting speed of <code>std::vector</code> vs. <code>std::list</code> on my MacBook. As we can see by the results below, vectors are much faster than lists when it comes to sorting (almost 8 times faster on my machine).</p>

<p>Thx to Dean H. for commenting.</p>
<table class='highlighttable'><tr><td class='linenos'><div class='linenodiv'><pre><code class='cpp'> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64</code></pre></div></td><td class='code'><div class='highlight'><pre><span class='cp'>#include &lt;algorithm&gt;   </span><span class='c1'>// Needed for sort() method</span>
<span class='cp'>#include &lt;vector&gt;      </span><span class='c1'>// STL vector class</span>
<span class='cp'>#include &lt;list&gt;        </span><span class='c1'>// STL list class</span>
<span class='cp'>#include &lt;iostream&gt;    </span><span class='c1'>// Needed for cout,endl</span>
<span class='cp'>#include &lt;sys/time.h&gt;  </span><span class='c1'>// Needed for rand,timeval</span>
<span class='k'>using</span> <span class='k'>namespace</span> <span class='n'>std</span><span class='p'>;</span>   <span class='c1'>// Save us some typing</span>

<span class='kt'>bool</span> <span class='n'>comp</span><span class='p'>(</span><span class='k'>const</span> <span class='kt'>int</span><span class='o'>&amp;</span> <span class='n'>num1</span><span class='p'>,</span> <span class='k'>const</span> <span class='kt'>int</span><span class='o'>&amp;</span> <span class='n'>num2</span><span class='p'>)</span>
<span class='p'>{</span>
   <span class='k'>return</span> <span class='n'>num1</span> <span class='o'>&gt;</span> <span class='n'>num2</span><span class='p'>;</span>
<span class='p'>}</span>


<span class='c1'>// Prints the difference between to time values to std::out</span>
<span class='kt'>void</span> <span class='n'>printDiff</span><span class='p'>(</span><span class='k'>const</span> <span class='n'>timeval</span><span class='o'>&amp;</span> <span class='n'>end</span><span class='p'>,</span> <span class='k'>const</span> <span class='n'>timeval</span><span class='o'>&amp;</span> <span class='n'>start</span><span class='p'>)</span>
<span class='p'>{</span>
    <span class='n'>timeval</span> <span class='n'>diff</span><span class='p'>;</span>
    <span class='n'>diff</span><span class='p'>.</span><span class='n'>tv_sec</span> <span class='o'>=</span> <span class='n'>end</span><span class='p'>.</span><span class='n'>tv_sec</span>  <span class='o'>-</span> <span class='n'>start</span><span class='p'>.</span><span class='n'>tv_sec</span><span class='p'>;</span>
    <span class='n'>diff</span><span class='p'>.</span><span class='n'>tv_usec</span><span class='o'>=</span> <span class='n'>end</span><span class='p'>.</span><span class='n'>tv_usec</span> <span class='o'>-</span> <span class='n'>start</span><span class='p'>.</span><span class='n'>tv_usec</span><span class='p'>;</span>
    <span class='k'>if</span> <span class='p'>(</span><span class='n'>diff</span><span class='p'>.</span><span class='n'>tv_usec</span> <span class='o'>&lt;</span> <span class='mi'>0</span><span class='p'>)</span> <span class='p'>{</span>
        <span class='n'>diff</span><span class='p'>.</span><span class='n'>tv_sec</span><span class='o'>--</span><span class='p'>;</span>
        <span class='n'>diff</span><span class='p'>.</span><span class='n'>tv_usec</span> <span class='o'>+=</span> <span class='mi'>1000000</span><span class='p'>;</span>
    <span class='p'>}</span>
    <span class='n'>cout</span> <span class='o'>&lt;&lt;</span> <span class='s'>&quot;Elapsed time: &quot;</span> <span class='o'>&lt;&lt;</span> <span class='n'>diff</span><span class='p'>.</span><span class='n'>tv_sec</span> <span class='o'>&lt;&lt;</span> <span class='s'>&quot;seconds, &quot;</span>
         <span class='o'>&lt;&lt;</span> <span class='n'>diff</span><span class='p'>.</span><span class='n'>tv_usec</span> <span class='o'>&lt;&lt;</span> <span class='s'>&quot; microseconds.&quot;</span> <span class='o'>&lt;&lt;</span> <span class='n'>endl</span><span class='p'>;</span>
<span class='p'>}</span>

<span class='kt'>int</span> <span class='n'>main</span><span class='p'>()</span>
<span class='p'>{</span>
    <span class='n'>vector</span><span class='o'>&lt;</span><span class='kt'>int</span><span class='o'>&gt;</span> <span class='n'>v</span><span class='p'>;</span>              <span class='c1'>// Vector containing integers</span>
    <span class='n'>vector</span><span class='o'>&lt;</span><span class='kt'>int</span><span class='o'>&gt;::</span><span class='n'>iterator</span> <span class='n'>vIt</span><span class='p'>;</span>  <span class='c1'>// Iterator navigating through vector</span>

    <span class='n'>list</span><span class='o'>&lt;</span><span class='kt'>int</span><span class='o'>&gt;</span> <span class='n'>l</span><span class='p'>;</span>                <span class='c1'>// List containing integers</span>
    <span class='n'>list</span><span class='o'>&lt;</span><span class='kt'>int</span><span class='o'>&gt;::</span><span class='n'>iterator</span> <span class='n'>lIt</span><span class='p'>;</span>    <span class='c1'>// Iterator navigating through list</span>


    <span class='c1'>// Insert a 100 million integer values into both containers</span>
    <span class='n'>srand</span><span class='p'>(</span> <span class='n'>time</span><span class='p'>(</span><span class='nb'>NULL</span><span class='p'>)</span> <span class='p'>);</span> <span class='c1'>// Initialize random number generator</span>
    <span class='n'>generate_n</span> <span class='p'>(</span><span class='n'>back_inserter</span><span class='p'>(</span><span class='n'>v</span><span class='p'>),</span> <span class='mi'>100000000</span><span class='p'>,</span> <span class='n'>rand</span><span class='p'>);</span>
    <span class='n'>generate_n</span> <span class='p'>(</span><span class='n'>back_inserter</span><span class='p'>(</span><span class='n'>l</span><span class='p'>),</span> <span class='mi'>100000000</span><span class='p'>,</span> <span class='n'>rand</span><span class='p'>);</span>

    <span class='c1'>// Measure sorting time</span>
    <span class='n'>timeval</span> <span class='n'>start</span><span class='p'>,</span> <span class='n'>end</span><span class='p'>;</span>

    <span class='c1'>// Sort vector</span>
    <span class='n'>gettimeofday</span><span class='p'>(</span><span class='o'>&amp;</span><span class='n'>start</span><span class='p'>,</span> <span class='mi'>0</span><span class='p'>);</span>
    <span class='n'>sort</span><span class='p'>(</span><span class='n'>v</span><span class='p'>.</span><span class='n'>begin</span><span class='p'>(),</span> <span class='n'>v</span><span class='p'>.</span><span class='n'>end</span><span class='p'>(),</span> <span class='n'>comp</span><span class='p'>);</span>
    <span class='n'>gettimeofday</span><span class='p'>(</span><span class='o'>&amp;</span><span class='n'>end</span><span class='p'>,</span> <span class='mi'>0</span><span class='p'>);</span>
    <span class='n'>cout</span> <span class='o'>&lt;&lt;</span> <span class='s'>&quot;VECTOR: &quot;</span><span class='p'>;</span>
    <span class='n'>printDiff</span><span class='p'>(</span><span class='n'>end</span><span class='p'>,</span> <span class='n'>start</span><span class='p'>);</span>

    <span class='c1'>// Sort list</span>
    <span class='n'>gettimeofday</span><span class='p'>(</span><span class='o'>&amp;</span><span class='n'>start</span><span class='p'>,</span> <span class='mi'>0</span><span class='p'>);</span>
    <span class='n'>l</span><span class='p'>.</span><span class='n'>sort</span><span class='p'>(</span><span class='n'>comp</span><span class='p'>);</span>
    <span class='n'>gettimeofday</span><span class='p'>(</span><span class='o'>&amp;</span><span class='n'>end</span><span class='p'>,</span> <span class='mi'>0</span><span class='p'>);</span>
    <span class='n'>cout</span> <span class='o'>&lt;&lt;</span> <span class='s'>&quot;LIST: &quot;</span><span class='p'>;</span>
    <span class='n'>printDiff</span><span class='p'>(</span><span class='n'>end</span><span class='p'>,</span> <span class='n'>start</span><span class='p'>);</span>

    <span class='cm'>/* Output:</span>
<span class='cm'>     * VECTOR: Elapsed time: 99seconds, 566816 microseconds.</span>
<span class='cm'>     * LIST:  Elapsed time: 770seconds, 216836 microseconds</span>
<span class='cm'>     */</span>
    <span class='k'>return</span> <span class='mi'>0</span><span class='p'>;</span>
<span class='p'>}</span>
</pre></div>
</td></tr></table>
]]></content:encoded>
		</item>
	
	<item>
		<title>Overkill: Java as a first programming language</title>
		<link>/2010/overkill-java-as-a-first-programming-language</link>
		<pubDate>2010-02-12T00:00:00+01:00</pubDate>
		<dc:creator>Matthias Endler</dc:creator>
		<guid isPermaLink="false">/2010/overkill-java-as-a-first-programming-language</guid>
		<description><![CDATA[ <p>I recently talked to a student in my neighborhood about his first programming experiences. They... [...]]]>
		</description>
			<content:encoded><![CDATA[<p>I recently talked to a student in my neighborhood about his first programming experiences. They started learning <em>Java</em> at school and it soon turned out to be horrible.</p>

<p>A lot of us learned coding in languages like <em>BASIC</em> or <em>Pascal</em>. There was no object orientation, no sophisticated file I/O and almost no modularization&#8230;and it was great. In <em>BASIC</em> you could just write</p>
<table class='highlighttable'><tr><td class='linenos'><div class='linenodiv'><pre><code class='python'>1</code></pre></div></td><td class='code'><div class='highlight'><pre><span class='n'>PRINT</span> <span class='s'>&quot;HELLO WORLD&quot;</span>
</pre></div>
</td></tr></table>
<p>and you were done. This was actually a running program solving a basic and reoccurring problem: Output some text on a screen.</p>

<p>If you wanted to do the same thing in <em>Java</em> you simply write:</p>
<table class='highlighttable'><tr><td class='linenos'><div class='linenodiv'><pre><code class='java'>1
2</code></pre></div></td><td class='code'><div class='highlight'><pre><span class='kd'>public</span> <span class='kd'>class</span> <span class='nc'>Main</span> <span class='o'>{</span> <span class='kd'>public</span> <span class='kd'>static</span> <span class='kt'>void</span> <span class='n'>main</span> <span class='o'>(</span><span class='n'>String</span><span class='o'>[]</span> <span class='n'>args</span><span class='o'>)</span> <span class='o'>{</span>
<span class='n'>System</span><span class='o'>.</span><span class='na'>out</span><span class='o'>.</span><span class='na'>println</span><span class='o'>(</span><span class='s'>&quot;Hello, world!&quot;</span><span class='o'>);</span> <span class='o'>}</span> <span class='o'>}</span>
</pre></div>
</td></tr></table>
<p>Do you see how much knowledge about programming you must have to achieve the easiest task one could think of? Describing the program to a novice programmer may sound like this:</p>

<blockquote>
<p>Create a Main class containing a main-method returning void expecting a string array as single argument using the <code>println</code> method of the out object of class PrintStream passing your text as single argument.</p>
</blockquote>

<p>&#8212; please just don&#8217;t forget your brackets. This way your first programming hours are guaranteed to be great fun.</p>

<p>OK. So what are the alternatives? I admit that nobody wants to write <em>BASIC</em> anymore because of its lack of a sophisticated standard library for graphics (<em>Java</em> doesn&#8217;t have one either) and its weak scalability. The language has to be simple and clean. It should be fast enough for numerical tasks but not as wordy as the rigid C-type bracket languages (sorry C++ guys). It should have a smooth learning-curve and provide direct feedback (compiled languages often suck at that point). It should encourage clean code and reward best practices. One language that provides all that is <em><em>Python</em></em>.</p>

<p>And <em>Python</em> has even more: hundreds of libraries that help you with almost everything, good integration into common IDEs (PyDev in Eclipse, IDLE&#8230;), a precise and elegant syntax.</p>

<p>Here is our program from above written in <em>Python</em>:</p>
<table class='highlighttable'><tr><td class='linenos'><div class='linenodiv'><pre><code class='python'>1</code></pre></div></td><td class='code'><div class='highlight'><pre><span class='k'>print</span><span class='p'>(</span><span class='s'>&quot;Hello World&quot;</span><span class='p'>)</span>
</pre></div>
</td></tr></table>
<p>There&#8217;s no need to know about object orientation, scopes and function arguments at this point. No house-holding or book-keeping. Yes, it&#8217;s an interpreted language but that&#8217;s not a deal breaker for beginners.</p>

<p>If you aren&#8217;t convinced yet, printing and formatting text output in <em>Java</em> is relatively easy for an advanced programmer but the really ugly stuff begins with file input:</p>
<table class='highlighttable'><tr><td class='linenos'><div class='linenodiv'><pre><code class='java'> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22</code></pre></div></td><td class='code'><div class='highlight'><pre><span class='kn'>import</span> <span class='nn'>java.io.BufferedReader</span><span class='o'>;</span> 
<span class='kn'>import</span> <span class='nn'>java.io.FileNotFoundException</span><span class='o'>;</span> 
<span class='kn'>import</span> <span class='nn'>java.io.FileReader</span><span class='o'>;</span> 
<span class='kn'>import</span> <span class='nn'>java.io.IOException</span><span class='o'>;</span> 
 
<span class='kd'>public</span> <span class='kd'>class</span> <span class='nc'>fileIO</span> <span class='o'>{</span> 
    <span class='kd'>public</span> <span class='kd'>static</span> <span class='kt'>void</span> <span class='nf'>main</span><span class='o'>(</span><span class='n'>String</span><span class='o'>[]</span> <span class='n'>args</span><span class='o'>)</span> <span class='o'>{</span> 
        <span class='n'>String</span> <span class='n'>filename</span> <span class='o'>=</span> <span class='s'>&quot;test.txt&quot;</span><span class='o'>,</span> <span class='n'>line</span><span class='o'>;</span> 
        <span class='k'>try</span> <span class='o'>{</span> 
            <span class='n'>BufferedReader</span> <span class='n'>myFile</span> <span class='o'>=</span> 
                <span class='k'>new</span> <span class='nf'>BufferedReader</span><span class='o'>(</span><span class='k'>new</span> <span class='n'>FileReader</span><span class='o'>(</span><span class='n'>filename</span><span class='o'>));</span> 
            
            <span class='k'>while</span> <span class='o'>(</span> <span class='o'>(</span> <span class='n'>line</span> <span class='o'>=</span> <span class='n'>myFile</span><span class='o'>.</span><span class='na'>readLine</span><span class='o'>())</span> <span class='o'>!=</span> <span class='kc'>null</span><span class='o'>)</span> <span class='o'>{</span> 
                <span class='n'>System</span><span class='o'>.</span><span class='na'>out</span><span class='o'>.</span><span class='na'>println</span><span class='o'>(</span><span class='n'>line</span><span class='o'>);</span>
            <span class='o'>}</span> 
        <span class='o'>}</span> <span class='k'>catch</span> <span class='o'>(</span><span class='n'>FileNotFoundException</span> <span class='n'>e</span><span class='o'>)</span> <span class='o'>{</span> 
            <span class='n'>e</span><span class='o'>.</span><span class='na'>printStackTrace</span><span class='o'>();</span> 
        <span class='o'>}</span> <span class='k'>catch</span> <span class='o'>(</span><span class='n'>IOException</span> <span class='n'>e</span><span class='o'>)</span> <span class='o'>{</span> 
            <span class='n'>e</span><span class='o'>.</span><span class='na'>printStackTrace</span><span class='o'>();</span> 
        <span class='o'>}</span> 
    <span class='o'>}</span> 
<span class='o'>}</span> 
</pre></div>
</td></tr></table>
<p>I hear you say: &#8220;Dude, file I/O is pretty complex. It&#8217;s just the way it is&#8221;. That&#8217;s true&#8230;_internally_. But the user should get an easy interface. <em>Python</em> shows how it&#8217;s done:</p>
<table class='highlighttable'><tr><td class='linenos'><div class='linenodiv'><pre><code class='python'>1</code></pre></div></td><td class='code'><div class='highlight'><pre><span class='nb'>file</span> <span class='o'>=</span> <span class='nb'>open</span><span class='p'>(</span><span class='s'>&quot;test.txt&quot;</span><span class='p'>);</span> <span class='n'>text</span> <span class='o'>=</span> <span class='nb'>file</span><span class='o'>.</span><span class='n'>read</span><span class='p'>();</span> <span class='k'>print</span><span class='p'>(</span><span class='n'>text</span><span class='p'>);</span>
</pre></div>
</td></tr></table>
<p>The code goes hand in hand with the natural understanding of how the process works: &#8220;The computer opens a file, reads it and prints it&#8221;. Even a five year old kid can understand that. Nobody would start to explain: &#8220;Before you can read a file you need a BufferedReader that works on a FileReader&#8230;&#8221; even if this is exactly how it works <em>internally</em>. You want to explain the big picture at first. The elementary principles of teaching a computer how to do useful stuff. Otherwise you will start frustrating beginners and fool them into thinking that they are not bright enough for programming. Programming is fun and starting with it is the most important step. So don&#8217;t spoil that experience with layers of unneeded abstraction.</p>
]]></content:encoded>
		</item>
	
	<item>
		<title>Sorry Apple, that iPad sucks!</title>
		<link>/2010/sorry-apple-that-ipad-sucks</link>
		<pubDate>2010-01-27T00:00:00+01:00</pubDate>
		<dc:creator>Matthias Endler</dc:creator>
		<guid isPermaLink="false">/2010/sorry-apple-that-ipad-sucks</guid>
		<description><![CDATA[ <p>When Steve Jobs held it in his hands my first thought was: &#8220;That thing is... [...]]]>
		</description>
			<content:encoded><![CDATA[<p>When Steve Jobs held it in his hands my first thought was: &#8220;That thing is fat and it somehow looks like a giant iPod&#8221;. Just like somebody lost his Apple phone on a bus and a million people sat on it. Obviously it looks like we all expected. A black glossy surface with aluminium highlights here and there. On the bottom is that compulsive &#8220;help me!&#8221; button and that&#8217;s about it. Oh! And it&#8217;s thin. Yay!</p>

<p>From a hardware point of few nothing to fall in love with. It can&#8217;t cope with the sophisticated elegance of the iPod that takes full advantage of its size with its zoom and pan functions and it doesn&#8217;t sport the versatility of a full-fledged MacBook Pro with all its ports and gizmos.</p>

<p>Unfortunately the software side is even more unimpressive. That iPhone OS with its tiny icons, its useless dockbar, its single-tasking core looks lost and abused on this 10 inch display. It fits well for a phone where display size is limited but on that fancy new &#8220;web device&#8221; a lot of potential is wasted. Why not design a new web-oriented interface with a calender and facebook as a desktop. With recommended YouTube videos and new mails at your finger tips. Instead you don&#8217;t even get Flash. You can&#8217;t install Firefox. Eww.</p>

<p>Apple wants to keep its babies separate. Your iPhone for calls and navigation, your laptop for &#8220;hard stuff&#8221; aka &#8220;work&#8221; your iPod for media and your iPad for&#8230;umm&#8230;surfing? What you get is a hybrid device that does essentially nothing.For hard number crunching you&#8217;re better off with your desktop workstation or notebook. For music an iPod fits your needs. Chatting and phone calls are reserved to the iPhone. SMS too. On the other end your iPad does not even have a webcam.</p>

<p>So you&#8217;re left with that overpriced eBook-reader that includes a web browser and 14.000 apps that were designed for a 320x480 pixel screen. Oh and for eBooks we&#8217;ve got the Amazon Kindle which is cheaper and doesn&#8217;t hurt them eyes while reading because of that fancy E-Inc technology. Btw you get two days battery lifetime, too. Out of the box the iPad may be the most expensive book you&#8217;ll ever buy. It may soon go the way of the Macbook Air and the Apple TV. Nice idea but irrelevant.</p>

<p>Another tricky part is writing text on that device. Everything that&#8217;s longer than an URL is a pain on that glass surface. On top of that you need to put it on the table and bend over the device to use all your fingers for typing. Just hope the sun does not shine.</p>

<p>I don&#8217;t say this won&#8217;t become a huge success for Apple when there will be new apps and hackers to get their hands dirty on that device. A pirated version may do all sorts of crazy stuff but that&#8217;s illegal and you&#8217;ll loose your warranty. There is a long way to go for Apple. They just don&#8217;t understand that <em>web</em> also means <em>open</em>.</p>
]]></content:encoded>
		</item>
	
	<item>
		<title>Howto sort a vector or a list in C++ using STL</title>
		<link>/2010/howto-sort-a-vector-or-a-list-in-c-using-stl</link>
		<pubDate>2010-01-27T00:00:00+01:00</pubDate>
		<dc:creator>Matthias Endler</dc:creator>
		<guid isPermaLink="false">/2010/howto-sort-a-vector-or-a-list-in-c-using-stl</guid>
		<description><![CDATA[ <p>A little code snippet that people need very often:</p> <table class='highlighttable'><tr><td class='linenos'><div class='linenodiv'><pre><code class='cpp'> 1... [...]]]>
		</description>
			<content:encoded><![CDATA[<p>A little code snippet that people need very often:</p>
<table class='highlighttable'><tr><td class='linenos'><div class='linenodiv'><pre><code class='cpp'> 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85</code></pre></div></td><td class='code'><div class='highlight'><pre><span class='cm'>/*</span>
<span class='cm'> * Howto sort a vector or a list in C++ using STL</span>
<span class='cm'> */</span>

<span class='cp'>#include &lt;algorithm&gt;	</span><span class='c1'>// Needed for sort() method</span>
<span class='cp'>#include &lt;vector&gt;	</span><span class='c1'>// STL vector class</span>
<span class='cp'>#include &lt;list&gt;		</span><span class='c1'>// STL list class</span>
<span class='cp'>#include &lt;iostream&gt;	</span><span class='c1'>// Needed for cout,endl</span>
<span class='k'>using</span> <span class='k'>namespace</span> <span class='n'>std</span><span class='p'>;</span>	<span class='c1'>// Save us some typing</span>


<span class='cm'>/*</span>
<span class='cm'> * This is a comparison function. It can be used to tell sort()</span>
<span class='cm'> * how to order the elements in our container (the vector or list).</span>
<span class='cm'> * You can write a comparator for every data type (i.e. double, string...).</span>
<span class='cm'> */</span>
<span class='kt'>bool</span> <span class='n'>comp</span><span class='p'>(</span><span class='k'>const</span> <span class='kt'>int</span><span class='o'>&amp;</span> <span class='n'>num1</span><span class='p'>,</span> <span class='k'>const</span> <span class='kt'>int</span><span class='o'>&amp;</span> <span class='n'>num2</span><span class='p'>)</span> <span class='p'>{</span>
	<span class='k'>return</span> <span class='n'>num1</span> <span class='o'>&gt;</span> <span class='n'>num2</span><span class='p'>;</span>
<span class='p'>}</span>
<span class='kt'>int</span> <span class='n'>main</span><span class='p'>()</span> <span class='p'>{</span>
	<span class='c1'>// SORTING WITH VECTORS //</span>
	<span class='n'>vector</span><span class='o'>&lt;</span><span class='kt'>int</span><span class='o'>&gt;</span> <span class='n'>v</span><span class='p'>;</span>
	<span class='c1'>// A vector containing integers</span>
	<span class='n'>vector</span><span class='o'>&lt;</span><span class='kt'>int</span><span class='o'>&gt;::</span><span class='n'>iterator</span> <span class='n'>vIt</span><span class='p'>;</span>
	<span class='c1'>// A pointer to a vector element</span>
	<span class='c1'>// Insert some values</span>
	<span class='n'>v</span><span class='p'>.</span><span class='n'>push_back</span><span class='p'>(</span><span class='mi'>5</span><span class='p'>);</span>
	<span class='n'>v</span><span class='p'>.</span><span class='n'>push_back</span><span class='p'>(</span><span class='mi'>12</span><span class='p'>);</span>
	<span class='n'>v</span><span class='p'>.</span><span class='n'>push_back</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>);</span>
	<span class='cm'>/*</span>
<span class='cm'>     * The generic STL sort function uses three parameters:</span>
<span class='cm'>     * v.begin()  Iterator pointing at the _beginning_ of the container</span>
<span class='cm'>     * v.end()    Iterator pointing at the _end_ of it</span>
<span class='cm'>     * comp       [Optional] A comparison function (see above)</span>
<span class='cm'>     *</span>
<span class='cm'>     * The above mentioned iterators must be random access iterators because</span>
<span class='cm'>     * sort() takes advantage of clever tricks that require direct access to</span>
<span class='cm'>     * all elements of the vector. This makes it really fast.</span>
<span class='cm'>     * (Currently introsort is used with O(n*log n) even in worst case).</span>
<span class='cm'>     *</span>
<span class='cm'>     * Unfortunately calling sort like that does not look very object oriented.</span>
<span class='cm'>     */</span>
	<span class='n'>sort</span><span class='p'>(</span><span class='n'>v</span><span class='p'>.</span><span class='n'>begin</span><span class='p'>(),</span> <span class='n'>v</span><span class='p'>.</span><span class='n'>end</span><span class='p'>(),</span> <span class='n'>comp</span><span class='p'>);</span>
	<span class='n'>cout</span> <span class='o'>&lt;&lt;</span> <span class='s'>&quot;Vector: &quot;</span><span class='p'>;</span>
	<span class='k'>for</span> <span class='p'>(</span><span class='n'>vIt</span> <span class='o'>=</span> <span class='n'>v</span><span class='p'>.</span><span class='n'>begin</span><span class='p'>();</span> <span class='n'>vIt</span> <span class='o'>!=</span> <span class='n'>v</span><span class='p'>.</span><span class='n'>end</span><span class='p'>();</span> <span class='n'>vIt</span><span class='o'>++</span><span class='p'>)</span> <span class='p'>{</span>
		<span class='n'>cout</span> <span class='o'>&lt;&lt;</span> <span class='o'>*</span><span class='n'>vIt</span> <span class='o'>&lt;&lt;</span> <span class='s'>&quot; &quot;</span><span class='p'>;</span>
		<span class='c1'>// Print current element to standard output</span>
	<span class='p'>}</span>
	<span class='n'>cout</span> <span class='o'>&lt;&lt;</span> <span class='n'>endl</span><span class='p'>;</span>
	<span class='c1'>// SORTING WITH LISTS //</span>
	<span class='n'>list</span><span class='o'>&lt;</span><span class='kt'>int</span><span class='o'>&gt;</span> <span class='n'>l</span><span class='p'>;</span>
	<span class='c1'>// A list containing integers</span>
	<span class='n'>list</span><span class='o'>&lt;</span><span class='kt'>int</span><span class='o'>&gt;::</span><span class='n'>iterator</span> <span class='n'>lIt</span><span class='p'>;</span>
	<span class='c1'>// A pointer to a list element</span>
	<span class='c1'>// Insert some values</span>
	<span class='n'>l</span><span class='p'>.</span><span class='n'>push_back</span><span class='p'>(</span><span class='mi'>5</span><span class='p'>);</span>
	<span class='n'>l</span><span class='p'>.</span><span class='n'>push_back</span><span class='p'>(</span><span class='mi'>12</span><span class='p'>);</span>
	<span class='n'>l</span><span class='p'>.</span><span class='n'>push_back</span><span class='p'>(</span><span class='mi'>1</span><span class='p'>);</span>
	<span class='cm'>/*</span>
<span class='cm'>     * Here is the major difference between vectors and lists in general:</span>
<span class='cm'>     * Vectors offer fast random access to every element</span>
<span class='cm'>     * but inserting a new element at the beginning or in the middle is slow.</span>
<span class='cm'>     * On the other hand inserting into a list is fast but searching for</span>
<span class='cm'>     * a specific element is slow. Vectors behave much like an array</span>
<span class='cm'>     * while lists only allow slow sequential access.</span>
<span class='cm'>     * Therefore we need a different function to sort all elements that does</span>
<span class='cm'>     * not need random access iterators.</span>
<span class='cm'>     *</span>
<span class='cm'>     * comp       [Optional] A comparison function (see above)</span>
<span class='cm'>     *</span>
<span class='cm'>     * Note that sort() is specific for the list and is implemented as a</span>
<span class='cm'>     * member function of list&lt;&gt;. This is much more object orientated.</span>
<span class='cm'>     */</span>
	<span class='n'>l</span><span class='p'>.</span><span class='n'>sort</span><span class='p'>(</span><span class='n'>comp</span><span class='p'>);</span>
	<span class='n'>cout</span> <span class='o'>&lt;&lt;</span> <span class='s'>&quot;List: &quot;</span><span class='p'>;</span>
	<span class='k'>for</span> <span class='p'>(</span><span class='n'>lIt</span> <span class='o'>=</span> <span class='n'>l</span><span class='p'>.</span><span class='n'>begin</span><span class='p'>();</span> <span class='n'>lIt</span> <span class='o'>!=</span> <span class='n'>l</span><span class='p'>.</span><span class='n'>end</span><span class='p'>();</span> <span class='n'>lIt</span><span class='o'>++</span><span class='p'>)</span> <span class='p'>{</span>
		<span class='n'>cout</span> <span class='o'>&lt;&lt;</span> <span class='o'>*</span><span class='n'>lIt</span> <span class='o'>&lt;&lt;</span> <span class='s'>&quot; &quot;</span><span class='p'>;</span>
	<span class='p'>}</span>
	<span class='n'>cout</span> <span class='o'>&lt;&lt;</span> <span class='n'>endl</span><span class='p'>;</span>
	<span class='cm'>/* Output:</span>
<span class='cm'>     * Vector: 12 5 1</span>
<span class='cm'>     * List: 12 5 1</span>
<span class='cm'>     */</span>
	<span class='k'>return</span> <span class='mi'>0</span><span class='p'>;</span>
<span class='p'>}</span>
</pre></div>
</td></tr></table>
]]></content:encoded>
		</item>
	
	<item>
		<title>Web-Development with JQuery</title>
		<link>/2009/web-development-with-jquery-a-list-of-development-environments</link>
		<pubDate>2009-11-25T00:00:00+01:00</pubDate>
		<dc:creator>Matthias Endler</dc:creator>
		<guid isPermaLink="false">/2009/web-development-with-jquery-a-list-of-development-environments</guid>
		<description><![CDATA[ <p>I&#8217;ve searched for some IDEs to create jQuery code more quickly. Hacking the files into... [...]]]>
		</description>
			<content:encoded><![CDATA[<p>I&#8217;ve searched for some IDEs to create jQuery code more quickly. Hacking the files into a text-editor (like <em>Textmate</em>) and doing some &#8220;real- life&#8221; bug testing by simply opening Firefox and running the site is not very handy. So here is a list of alternatives I came up with. It&#8217;s just an overview loosely ordered by interest.</p>

<h3 id='aptana'><a href='http://www.aptana.com/'>Aptana</a></h3>

<p>Standalone and Eclipse plugin. OpenSource with code completion, syntax highlighting&#8230;</p>

<h3 id='komodo_edit'><a href='http://www.activestate.com/komodo_edit/'>Komodo Edit</a></h3>

<p>OSX, Linux, Windows. Open source.</p>

<h3 id='glimmer'><a href='http://visitmix.com/lab/glimmer'>Glimmer</a></h3>

<p>Microsoft jQuery Dev. Environment. Has wizards for common tasks. Free.</p>

<h3 id='firebug'><a href='http://getfirebug.com/'>FireBug</a></h3>

<p>Firefox plugin for debugging. Actually not an IDE.</p>

<h3 id='ixedit'><a href='http://www.ixedit.com/'>IxEdit</a></h3>

<p>Edit within browser. WYSIWYG. Free public beta.</p>

<h3 id='spket_ide'><a href='http://spket.com/'>Spket IDE</a></h3>

<p>JavaScript Toolkit. Eclipse Plugin.</p>

<h3 id='jslint'><a href='http://www.jslint.com/'>JsLint</a></h3>

<p>Online JavaScript parser and debugger.</p>

<h3 id='codelobster'><a href='http://www.codelobster.com/'>CodeLobster</a></h3>

<p>For PHP/HTML/CSS/JavaScript development. Trial.</p>

<h3 id='scintilla'><a href='http://www.scintilla.org/'>Scintilla</a></h3>

<p>GTK based professional IDE</p>

<p>Others include Visual Studio, NetBeans, Dreamweaver and another <a href='http://eclipse-plugins.2y.net/eclipse/plugin_details.jsp;jsessionid=22BE8F306691F47871593491AAA22C72?id=368'>JQuery Eclipse plugin</a>. <a href='http://www.jaxer.org/'>Jaxer</a> looks also interesting.</p>

<p>And finally here is a cool website with tons of material <a href='http://ajaxian.com/'>ajaxian</a>.</p>

<p>Did I miss one?</p>
]]></content:encoded>
		</item>
	
	<item>
		<title>Running legacy code</title>
		<link>/2009/running-legacy-code</link>
		<pubDate>2009-11-08T00:00:00+01:00</pubDate>
		<dc:creator>Matthias Endler</dc:creator>
		<guid isPermaLink="false">/2009/running-legacy-code</guid>
		<description><![CDATA[ <p>This short article deals with a serious problem in software development. When switching to a... [...]]]>
		</description>
			<content:encoded><![CDATA[<p>This short article deals with a serious problem in software development. When switching to a new platform (for instance from Windows XP to Windows Vista/7) the programmers need to make sure that old bits of code run flawlessly. There are several ways to achieve this goal that will be discussed during the next paragraphs:</p>

<h3 id='porting_the_code'>Porting the code</h3>

<p>This is generally considered a hard path to follow. For non-trivial legacy code-blocks chances are high that they contain side-effects and hacks in order to make them work in different environments. Porting code means replacing parts of the program that use functions and methods that don&#8217;t exist anymore with new ones which make use of the modern libraries&#160; and routines of the new platform. The major advantages are maintainable software and sometimes faster running programs. But it may be needed to hack the new platform libraries in order to preserve the whole functionality of an old program. When changing an algorithm inside legacy code the ported version may become unstable. Thus there may be better ways of mainting obsolete code today.</p>

<h3 id='emulators'>Emulators</h3>

<p>Emulators work much the same like porting the code. You replace old function calls with new ones in order to make everything work again. <br />However you don&#8217;t alter the old codebase itself (because you may not have the sourcecode available) but you create a new compatibility layer that &#8220;translates&#8221; the communication between the underlying operating system and software (our new platform) and our old software. Emulation can also be very fast and run stable for many years but writing an emulator can be even harder than porting the code because an educational guess may be needed to figure out how the program works internally. Additionaly the emulator itself may become obsolete in the future and might eventually&#160; be replaced by a new one.</p>

<h3 id='virtual_machines'>Virtual machines</h3>

<p>During the last years a new approach was rising up. The idea is simple: Don&#8217;t touch anything. Take the whole platform and copy it in order to run old software. The old software runs on top of the old operating system within a virtual machine that runs on the new platform.</p>

<p>From a sane software developers view this method is ridiculous. A lot of resources are wasted along the way. The system is busier switching contexts from an old platform to the new one and back than running the actual legacy program. However with cheap and capable hardware everywhere this idea gets more and more interesting. As Steve Atwood coined it:</p>

<blockquote>
<p>Always try to spend your way out of a performance problem first by throwing faster hardware at it.<sup id='fnref:1'><a href='#fn:1' rel='footnote'>1</a></sup></p>
</blockquote>

<p>And he&#8217;s right. The Microsoft developers did the same on their new NT 6.0 platform (Vista, Windows 7, Windows Server 2008&#8230;): Windows XP is running inside a virtual machine. This way everything behaves just like one would run the software on the old system. And by optimizing the performance bottlenecks (input/output, context switches) one gets a fast and stable, easy to maintain product.</p>

<p>Every method has its major advantages and disadvantages. It&#8217;s on the devoloper to select the appropriate strategy.</p>
<div class='footnotes'><hr /><ol><li id='fn:1'><a href='http://www.codinghorror.com/blog/archives/001198.html'>Article on Coding Horror</a><a href='#fnref:1' rev='footnote'>&#8617;</a></li></ol></div>
]]></content:encoded>
		</item>
	
	<item>
		<title>A short Review on ReactOS 0.3.3</title>
		<link>/2007/a-short-review-on-reactos-0-3-3</link>
		<pubDate>2007-09-18T00:00:00+02:00</pubDate>
		<dc:creator>Matthias Endler</dc:creator>
		<guid isPermaLink="false">/2007/a-short-review-on-reactos-0-3-3</guid>
		<description><![CDATA[ <p>FreeWin95 has come a long way since it has been renamed in 1998 and is... [...]]]>
		</description>
			<content:encoded><![CDATA[<p>FreeWin95 has come a long way since it has been renamed in 1998 and is now called ReactOS.</p>

<p>The new version 0.3.3 of the Windows 2000 clone already has a lot to offer and has significantly evolved in almost all areas compared to the last release. The developers have made a lot of progress in the lower system area (i. e. the NT Kernel) as well as in the application segment. Let&#8217;s have a look at some new features!</p>

<h3 id='setup'>Setup</h3>

<p>Due to the fact that I&#8217;ve tested ReactOS using the pre-configured VMWare Virtual Appliance (VMWare Fusion Version 1.0 (51348) on a MacBook 1.83 GHz to be precise) I can&#8217;t say much about the installation process of the new version using &#8220;real&#8221; hardware. However I&#8217;ve tried to install it with the Install CD that can be downloaded on the <a href='http://www.reactos.org'>project homepage</a>. Unfortunately I wasn&#8217;t very successful. Somehow ReactOS was not able to allocate the free space on my virtual hard disk&#8230;The last time I used the Install-CD on an old 300 MHz Computer I simply wiped my old partition out, created a new one (<a href='http://www.reactos.org/wiki/index.php/Installing_ReactOS'>fat32 only</a> guys :), formatted it and started the Installer. I had no problems. On the other hand it can be dangerous to install ReactOS on the same disk as Windows or Linux. Maybe the Installer doesn&#8217;t care and assimilates all disk space (<a href='http://www.youtube.com/watch?v=qItugh-fFgg'>All your system are belong to us</a>). But: Hey! MS does the same with all competitors, and maybe ReactOS simply aims to clone that approach ;) However the Virtual Appliance worked very smooth on my system. During the test I didn&#8217;t have much problems setting up and using the virtualized OS.</p>

<h3 id='bootup'>Bootup</h3>

<p>When I fire up the machine a nice bootloader appears and you may select between the normal and the debugging mode. Pushing <code>F8</code> gives you another menu where you can select more booting options - like a command prompt-only version or the infamous <code>last good</code> option. For the moment I simply waited eight seconds until the normal boot process started.</p>

<p>The developers have changed the bootup screen a bit by adapting the XP look and feel. Generally said the bootup process is very streamlined and offers a whole variety of options for the advanced user. But even the normal <a href='http://en.wikipedia.org/wiki/Pebcac#Acronyms_and_other_names_for_a_user_error'>PEBCAC</a> can easily reach the desktop interface. Presently the ReactOS kernel (which aims to be compatible with WinNT 5.2) offers about 25 to 30 percent of the <a href='http://en.wikipedia.org/wiki/ReactOS#Functionality'>functionality it will finally have in 1.0</a>. As a result of the broad kernel redesign in 0.2 to 0.3 the current release faces a lot of regressions in some applications that were already useable in 0.2.</p>

<h3 id='software'>Software</h3>

<p>ReactOS actually comes with a small amount of pre-installed software packages. Taking a closer look the team is working hard to offer a free replacement of commonly used Win Software. Naturally it has the <a href='http://www.reactos.org/media/screenshots/2007/ros_033_qemu_vnc_fun.png'>Command Prompt</a> as well as Regedit, Notepad and WordPad. It also features a scientific Calculator as well as the not-so-well-known Windows commandline classics like <code>shutdown.exe</code>, <code>regsvr32.exe</code> or <code>telnet</code>. Most of these basic programs were borrowed from the wine project. Together with the relatively stable kernel ReactOS already has a solid basis for further software development. Such Bluescreens are (really!) an exception: If you need a package that is not installed by default you can upgrade your system by installing software just as you would on Windows. There are many packages that run out of the box without further tweaking. Just look at the <a href='http://www.reactos.org/support/'>list of supported software</a> on the interwebs! The newly integrated Downloading-Tool - simply called <strong>Download!</strong> - can help you to install compatible software with just one click. Because it&#8217;s work in progress there are not so many programs available. You can select between the categories <strong>Internet &#38; Network</strong>, <strong>Development</strong>, <strong>Games &#38; Fun</strong> and <strong>Tools</strong>. Some cool open source apps like Firefox, Thunderbird, <a href='http://svn.reactos.org/videos/ros_030_smb.html'>Samba</a>, OpenTTD, 7zip and &#956;Torrent are already ready to use. In later versions it will be possible to update the list of preconfigured packages. That&#8217;s why I see the <strong>Download!</strong> feature as a promising invention.</p>

<h3 id='hardware_acceleration'>Hardware acceleration</h3>

<p>Despite the fact that 0.3.3 has all the necessary drivers on board to run on almost every machine without any need for configuration it may be quite interesting to see ReactOS on full speed using original hardware drivers. In my case I just needed to install the VMWare toolset that offers a major speed burst when installed. I&#8217;ve added a CD-Rom Drive to my virtual machine and clicked on <strong>Virtual Machine</strong> &gt; <strong>Install VMWare Tools</strong> while ReactOS was powered on. To my surprise almost everything worked like a charm and I could install the VGA and the audio drivers to tune my system. After a reboot - my system was messed up. The VGA resolution was down to 320-something pixels which made using the OS an impossible task. I had no chance to adjust the resolution with the common <strong>Display Properties</strong> window nor did it work to use Regedit and adjust the screen values manually. My second thought was &#8220;No problem&#8221;. In case of an emergency we have the Debug Mode on board. Well, what can I say: It didn&#8217;t work. It has the same screen resolution as the normal mode. Maybe there is a <a href='http://www.reactos.org/forum/viewtopic.php?p=23479'>workaround to fix it</a> but I was too lazy to figure it out and so I simply reset my virtual machine (There you have it, bastard!). The free Windows clone would be quite a usable system for a normal user if some of the configuration tools were already integrated. There is no printing implementation and you can&#8217;t presently use USB or firewire devices. The latest release offers only rudimentary network support. That said the team has worked hard to offer accessibility features as well as localization adjustments. At the moment one can select between 90 (!) supported languages</p>

<h3 id='stability'>Stability</h3>

<p>ReactOS still is (and will be for a long time) an experimental System. It&#8217;s normal for an unstable pre-release of an alpha software to randomly freeze or hang or kill your machine or whatsoever. Don&#8217;t panic when you have to restart - it&#8217;s (presently) normal. Don&#8217;t expect ReactOS to run all your .exe files it is a long and painful procedure to reach this aim. That said ReactOS 0.3.3 is surprisingly stable compared to older versions. Yes it occasionally hangs and it takes a nap from time to time when all of your ram gets pwned. But don&#8217;t be afraid: Just feel free to hang around a bit dazzling with the software - actually having FUN using your computer. 0.3.3 is the first version that doesn&#8217;t almost certainly crash after two minutes of use or a wrong click in the system configuration menu (o_O). ReactOS has grown up from a pure hacker playground to a mature, promising open source alternative for proprietary M$ desktop products. Certainly you&#8217;ll find a bug and maybe want to help the developers. In this case just go to their site and fill out a bug report and you can say to yourself that you&#8217;ve just supported free software. The thing a good developer (and good engineer in general) likes most is when somebody says <strong>Thanks for all the great work!</strong> That&#8217;s what I also like to say to the ROS team. Keep up the good work! According to Wikipedia the next major release (i.e. 0.4) will offer basic USB support and a complete SMB interface (making it fully compatible with the Windows network subsystem). After that ReactOS will enter beta status and we will see all the fancy <strong>user-world</strong> stuff like NTFS support or DirectX 7-9 support. So there is a long way to go and a lot to explore!</p>

<ul class='blocklist'>
<li><a href='http://www.reactos.org'>Project Homepage</a></li>

<li><a href='http://en.wikipedia.org/wiki/ReactOS'>ReactOS on Wikipedia (en)</a></li>

<li><a href='http://www.youtube.com/watch?v=eIGACCx-Z0U'>Firefox 2 Installing on Reactos 0.3.3 rc2</a></li>

<li><a href='http://www.youtube.com/watch?v=zQx_u_rWzCc&amp;mode=related&amp;search='>Unreal Tournament on Reactos 0.3.3 with real Hardware</a></li>
</ul>
]]></content:encoded>
		</item>
	
	<item>
		<title>Linux needs to evolve - now!</title>
		<link>/2007/linux-needs-to-evolve-now</link>
		<pubDate>2007-01-04T00:00:00+01:00</pubDate>
		<dc:creator>Matthias Endler</dc:creator>
		<guid isPermaLink="false">/2007/linux-needs-to-evolve-now</guid>
		<description><![CDATA[ <p>It was a brilliant idea to create an operating system that is free for everyone... [...]]]>
		</description>
			<content:encoded><![CDATA[<p>It was a brilliant idea to create an operating system that is free for everyone to use and to edit. Thousands of hackers around the globe share the dream of open source information technology without monopolism. Everybody who is into computing has heard of Linux and lots of them are using it for daily work. Even inexperienced users try out Linux by testing distributions like <a href='http://www.ubuntu.com/' title='Linux for human beeings - Canonical'>Ubuntu</a>, <a href='http://en.opensuse.org/Welcome_to_openSUSE.org' title='German distribution by Novel'>openSuse</a> or <a href='http://www.knopper.net/knoppix/index-en.html' title='Live Distri. Klaus Knopper'>Knoppix</a> because they are easy to use and to install. But that&#8217;s not the complete truth.</p>

<h3 id='hardware_woes'>Hardware woes</h3>

<p>This so called &#8220;out-of-the-box&#8221; experience can instead be very tricky and much to complicated for a normal user. When you insert the Ubuntu LiveCD you will be welcomed by a smart boot menu that lets you try out all the functionalities of a full-fledged Distribution without installing.</p>

<p>The window manager has a fresh, clean-looking <a href='http://ubuntuforums.org/showthread.php?t=234297'>aqua</a>-style interface. You click on install and almost everything is pre-configured and runs automatically. In most cases a distribution like Ubuntu auto-detects your hardware and installs the right modules. Hopefully. Sometimes it happens though that your printer is not working or your wireless connection was not recognized. This is mostly the case when you have shiny new hardware that linux hackers were not able to test yet. This can be a brand new inkjet printer (<a href='http://catb.org/~esr/writings/luxury-part-deux.html'>cups</a> and gimp-print have a long way to go) or the high-end graphics card.</p>

<h3 id='hacker_perception'>Hacker perception</h3>

<p>Not a problem you might think. Look for a new development driver on Google, do a quick <a href='http://www.debian.org/doc/manuals/apt-howto/index.en.html'>apt-get</a>, set-up your network connection and off you go! BUT explain that to <a href='http://lwn.net/2002/0117/a/aunt-tillie.php3'>Aunt Tillie</a> sitting in front of her PC thinking that a Wlan card is a trading card her six year old nephew Gregory wants for Christmas. I don&#8217;t have to add that she never opened a PC because she simply doesn&#8217;t bother what&#8217;s in there. You might say that it&#8217;s also hard to configure your network a Windows PC. Well maybe it is - but it&#8217;s already configured when you buy the PC - and that makes a big difference. Installing new software packages can be painful for normal users. Have you ever tried to explain to a non-geek why it&#8217;s handy to use a terminal for daily work? At best you get an answer like &#8221;I&#8217;ve used DOS and that was a piece of crap&#8221; or maybe he just says &#8220;You are still sitting in front of a black text-mode only window entering cryptical commands to configure your system? This is not 1969!&#8221;. Many people don&#8217;t understand why typing chmod is smarter than clicking through ten windows opening the &#8220;properties&#8221; submenu with a right mouse click on a file and finally adjusting the access rights. Why should somebody use &#8216;dmesg | tail&#8217; to get some system information. The problem is: When somebody refuses to learn those shell-commands they won&#8217;t understand 90 percent of the system. They can&#8217;t see what went wrong when there is some internal dependency error. Linux will only be easy when you understand what you are doing.</p>

<h3 id='software_woes'>Software woes</h3>

<p>Even if you know how to work with a command line you can&#8217;t be safe from so-called &#8221;<a href='http://en.wikipedia.org/wiki/Dependency_hell'>dependency hell</a>&#8221;. You want to install a new office suite called &#8220;OfficeSuite&#8221; and download the packages directly from the developers site. But sadly it won&#8217;t run because you don&#8217;t have those three other packages installed which are all needed by &#8220;OfficeSuite&#8221;. OK. So you install those packages as well but they depend on three other libraries that you don&#8217;t have as well. As a result you end up downloading and installing six packages in order to run &#8220;OfficeSuite&#8221; - now that&#8217;s what I call productivity from the very beginning. The big problem behind this mess is the fact that there are no real standards in the Linux world. There are thousands of different flavors and to some extent this is great and it&#8217;s exactly what free software has to look like but to get more traction we urgently need better standards to focus developing power. Don&#8217;t get me wrong: There must be different package formats (like <a href='http://www.rpm.org/'>rpm</a>, <a href='http://en.wikipedia.org/wiki/Deb_(file_format)'>deb</a>, <a href='http://www.gzip.org/'>tgz</a>&#8230;) or various window managers (<a href='http://www.kde.org/'>KDE</a>, <a href='http://www.gnome.org/'>Gnome</a>, <a href='http://fluxbox.sourceforge.net/'>fluxbox</a>, <a href='http://www.icewm.org/'>icewm</a>&#8230;) but they all must have a mutual basis to build up on. As we have seen the biggest problem is usability. Other Unix-like systems such as <a href='http://www.apple.com/macosx/leopard/index.html'>Mac OS X</a> show how it can be done. Common guys! We can do better than that!</p>

<h3 id='why_it_matters'>Why it matters</h3>

<p>Some of the brightest Linux advocates don&#8217;t realize that non- techies want a system where they don&#8217;t need to know anything about bash, emacs or vi to successfully configure hardware drivers and network sharing (<a href='http://forums.fedoraforum.org/showthread.php?p=681613'>samba</a>&#8230;urgh). Those who say &#8220;Screw it. If Linux is too hard for you, just don&#8217;t use it&#8221; are misguided. It is vital for open technologies to reach a critical mass and receive widespread adoption. Otherwise big companies like AMD and NVidia and EA have little interest to invest development time into open source projects.</p>
]]></content:encoded>
		</item>
	
	<item>
		<title>Howto switch from Linux to Windows - a users experience</title>
		<link>/2006/howto-switch-from-linux-to-windows</link>
		<pubDate>2006-09-20T00:00:00+02:00</pubDate>
		<dc:creator>Matthias Endler</dc:creator>
		<guid isPermaLink="false">/2006/howto-switch-from-linux-to-windows</guid>
		<description><![CDATA[ <p>I&#8217;ve read articles like &#8220;Switching from Windows to Linux in five easy steps&#8221; or &#8220;How... [...]]]>
		</description>
			<content:encoded><![CDATA[<p>I&#8217;ve read articles like &#8220;Switching from Windows to Linux in five easy steps&#8221; or &#8220;How changing your operating system can be fun with Linux&#8221; or &#8220;Why you should give Linux a chance&#8221; for five years now but there are always people who say Linux is difficult to learn and Windows has much easier install routines and so on. But what if the first OS you&#8217;ve ever used wasn&#8217;t MS Dos or Win95 but some kind of Unix-based free system like BSD or Linux?</p>

<p>This is a text about a guy who has always used Linux and learned working with it when he was a young man when he had to use it at work. Imagine Linux is the standard OS and Microsoft is a small company offering so called MS Windows XP. This text is meant to be <em>satiric</em> so <em>don&#8217;t take that too seriously</em>! It is a fictional story that ought to be fun. So repeat after me: I will not take it seriously or otherwise not read it at all.</p>

<h3 id='my_first_steps_with_windows_xp'>My first steps with Windows XP</h3>

<p>I&#8217;ve heard of a new Operating System called <a href='http://www.microsoft.com'>Microsoft Windows</a> the other day and wanted to give it a try because it is said to be easy to use and intuitive. Unfortunately the author offers no live-cd to test everything before I have to install. Instead of downloading it from the Internet as I always do I had to go to the computer store and buy it for a price of $150. There is also a so called <em>Professional Edition</em> but it would cost even more. The first thing when I came home was to open the box, put the included CD into my DVD-Drive and start my PC. The install screen consisted of a simple blue background and an easy-to-use menu. I wanted to backup my data at first so I tried to open a virtual terminal but the normal <a href='http://www.linuxjournal.com/article/5303'><code>CTRL-ALT-F1</code></a> didn&#8217;t work (WTF?). I had to reboot, make a copy and restart the installation all over again. The menu presented an option called &#8220;Install Windows XP&#8221; and I selected it.</p>

<p>Then there was a strange message that said &#8220;End-User License Agreement&#8221; and that I have to accept it in order to continue. I have never heard about something like this on Linux so I read most of the long text. I am not allowed to distribute this product and I may not make copies for my friends. This was somehow the extreme opposite of a license I&#8217;ve previously heard of that is called <a href='http://www.gnu.org/copyleft/gpl.html'>Gnu GPL</a>. After I accepted it with <code>F8</code> the installation continued. Windows didn&#8217;t recognize that I had ext3 and reiserfs partitions on my system and told me that it had found an &#8220;unknown filesystem&#8221;. I always thought that they were standard but maybe I was wrong. There was an option to erase the whole harddisk and install WinXP and I selected it. The next curious thing was that Windows doesn&#8217;t create a separate partition for my precious data but only one big system partition instead. &#8220;Maybe Windows has a highly secure file-system that makes automatic backups in case of data loss&#8221; I thought. Because I have a relatively big disk I wasn&#8217;t able to select Fat32 and had to cope with NTFS. It took a while to format my disk.</p>

<p>Unfortunately I wasn&#8217;t allowed to select any packages from a list as I always do on Linux - Windows selected everything alone instead. The only adjustments I could make were entering the correct system-time, my username and something called registration key. This is a 25-digit number I had to enter manually before setup continued. After another reboot Windows was finally up and ready - well almost. Windows wanted to be activated at first. Within this procedure Microsoft tries to access the web to verify all registration data. No way! I canceled and Windows told me that I have a 30-days trial until I must register. That sucks!</p>

<p>The new user interface appeared and I began to forget all the initial difficulties. It was a bit strange that there was no prompt to enter a default user for daily work. At the moment I was in administrator mode and had root access. That made me feel a bit uncomfortable because my little sister would have the same rights on that system. There also was no option to adjust file rights (something like chmod) manually and this could be another possible threat on a workstation. I&#8217;ve looked for system documentation material to start adjust my new system just as I want it but I couldn&#8217;t find anything usable (<code>F1</code> is really no help). Suddenly an ugly yellow pop up appeared in the bottom right corner. It said something like &#8220;New device found.&#8221; A window in the middle of my screen told me that I should insert the device driver CD for my printer and click on &#8220;Continue&#8221;. At first I didn&#8217;t know what that meant but suddenly I knew that a device driver was something like a module. I remember getting a CD together with my printer and I found it in a box on my attic. I clicked on &#8220;Continue&#8221;. My new system warned me that the device driver has not passed the hardware compatibility test and that I should try to find another driver. I was a bit afraid to click on &#8220;Continue&#8221; but finally I brought myself to do it and - everything ran flawlessly. I was a bit irritated why this stupid message annoyed me but I didn&#8217;t have time to fuss. Afterwards I installed all the other hardware and was ready for surfing.</p>

<p>There was no firewall or anti-virus software installed and I felt a bit insecure when I first entered the web. I surfed for maybe two minutes before I received a message from &#8220;Al Dick&#8221; who offered a six-year-ration of Viagra. Despite the fact that I don&#8217;t need such things (really!) it was unbelievably annoying. I found a howto on the net to turn off such messages. The Internet Explorer doesn&#8217;t have a popup filter and seems to attract ads and after fifteen minutes my taskbar looked like a battlefield full of spam. I had to close every window manually. My former Browser Firefox had tab-functionality included but IE seems to have own browsing rules and standards. But that was just the beginning: When I wanted to chat with my friends I found out that <a href='http://get.live.com/messenger/overview'>Windows Messenger</a> didn&#8217;t support ICQ, AIM, TOM and Jabber. I was forced to create a so called MSN-Account to continue but I refused. When I wanted to watch a newly bought DVD I got from France <a href='http://www.microsoft.com/windows/windowsmedia/download/'>Windows Media Player</a> told me that I may not use my DVD on my PC because of a so called &#8220;region code&#8221;. I was a bit confused about all this and asked a friend what to do. He told me that there is data transfer from a PC running Windows directly to Microsoft in order to check my hardware specifications and to make a genuine check of my software. I was shocked. I was paying a lot of money to own a stable, secure system that respects my privacy and not a buggy, talkative piece of crap open to others like a barn door. I wanted to take a look at the source code to see if those recriminations were right but I couldn&#8217;t because there was no source included! I don&#8217;t want to talk about the so called &#8220;file hierarchy&#8221; of XP where the systems config files can be accessed via <code>C:\Windows\system</code> instead of <code>/etc</code>. You don&#8217;t want to know what defragmentation is (there&#8217;s no need for it on a linux box), I won&#8217;t speak about the lousy terminal called &#8220;command&#8221; and why you should never ever open email attachments with Outlook Express.</p>

<p>After the system crashed when I wanted to burn a CD with the <a href='http://www.theregister.co.uk/2001/12/18/roxio_easycd_and_windows_xp/'>skinny burning tool</a> included while doing some spreadsheet analysis with Microsoft&#8217;s miserable OpenOffice alternative called &#8220;Office XP&#8221; that cost me another $119 (I got it a bit cheaper because I&#8217;m a student) I put everything back into the nice green box and took it back to my trader. At the same day I installed Linux again giving a review on a half-baked, single-user operating system called Windows XP that may be ready for desktop use in about five years. Until then I enjoy freedom with <a href='http://www.freebsd.org/'>BSD</a>, <a href='http://www.opensolaris.org/os/'>OpenSolaris</a> and <a href='http://www.distrowatch.com'>Linux</a>.</p>

<ul class='blocklist'>
<li><a href='http://cafcom.free.fr/spip.php?article18'>French translation by Jacques Bon</a></li>

<li><a href='http://inquietamente.wordpress.com/2008/12/06/como-pasarse-de-gnulinux-a-windows-humor/'>Spanish translation by Tux Azteca and Alberto March</a></li>
</ul>
]]></content:encoded>
		</item>
	
	<item>
		<title>Linux games</title>
		<link>/2006/linux-games</link>
		<pubDate>2006-08-30T00:00:00+02:00</pubDate>
		<dc:creator>Matthias Endler</dc:creator>
		<guid isPermaLink="false">/2006/linux-games</guid>
		<description><![CDATA[ <p>Here are some linux <a href='http://de.wikipedia.org/wiki/FLOSS'>floss</a> games I&#8217;ve tried (ordered by personal rating):</p> <h3 id='mania_drive_'>Mania... [...]]]>
		</description>
			<content:encoded><![CDATA[<p>Here are some linux <a href='http://de.wikipedia.org/wiki/FLOSS'>floss</a> games I&#8217;ve tried (ordered by personal rating):</p>

<h3 id='mania_drive_'>Mania Drive <div class='game onRight'>(9/10)</div></h3>

<p>I&#8217;m totally fascinated. It is almost too simple but it makes so much fun (especially when you play with a friend) that you can&#8217;t stop until you&#8217;ve played all levels. Mania Drive can be understood as a tribute to <a href='http://www.trackmania-the-game.de'>TrackMania</a> - a freeware game (well partly). I actually did a level myself than can soon be played via internet. It is called &#8220;Super Clio Brothers 3 !&#8221; and it beats SCB 1 and 2 in its craziness. Try it! <a href='http://maniadrive.raydium.org/'>Here is the official Mania Drive homepage</a> and <a href='http://www.matthias-endler.de/download/SuperClioBros3.mni'>here is the "Super Clio Brothers 3 !" track</a>. Feel free to share this link.</p>

<h3 id='pingus_'>Pingus <div class='game onRight'>(9/10)</div></h3>

<p>You know Lemmings. This game is a clone but with much better graphics, sound and level design. It uses the <a href='http://www.libsdl.org/'>SDL library</a> and is therefore highly portable. It runs on Windoze and Linux (and maybe OS X) but I haven&#8217;t tried it yet. Give it a try - you won&#8217;t be disappointed. <a href='http://pingus.seul.org/'>Here is the offical homepage</a></p>

<h3 id='super_tux_'>Super Tux <div class='game onRight'>(9/10)</div></h3>

<p>Can&#8217;t help but I have to give another nine out of ten points. This time Tux follows Super Marios footsteps and jumps through (partly very tough) levels. Here is the <a href='http://supertux.berlios.de/'>project page</a>.</p>

<h3 id='klotski_'>Klotski <div class='game onRight'>(9/10)</div></h3>

<p>how I love and hate it. The only thing to do is to move some bricks to finally get one out of a box. Sounds easy? <a href='http://phil.freehackers.org/klotski/'>Try! </a></p>

<h3 id='neverball_'>Neverball <div class='game onRight'>(8/10)</div></h3>

<p>Neverball is a game where you have to control a little ball over various platforms and mechanisms without letting it fall down. This can be harder than you think! Neverball has comic-like graphics and nice shadows and reflections. There is another game that can run on older PCs and doesn&#8217;t have bombastic graphic effects but makes the same fun: <a href='http://trackballs.sourceforge.net/'>Trackballs</a>. <a href='http://www.icculus.org/neverball'>Download Neverball here</a>.</p>

<h3 id='nexuiz_'>Nexuiz <div class='game onRight'>(7/10)</div></h3>

<p>This is a shooter with nice graphics and balanced gameplay. I often play shooters and there are a lot of them out there available for free. It&#8217;s a pity that there are no bots in the game so it can only be played on lan parties or via internet. <a href='http://www.alientrap.org/nexuiz/'>Look here to download</a>.</p>

<h3 id='cube_'>Cube <div class='game onRight'>(7/10)</div></h3>

<p>And again we have a shooter here. This time it is a fast and dynamic shooter that has its focus on lan gamers and simple gameplay. It has the highest framerate of those three mentioned and it is optimized for speed. One may like it or not. <a href='http://www.cubeengine.com/'>Download here</a>! There is also a new engine still in developement: <a href='http://sauerbraten.org/'>Sauerbraten/Cube2</a>.</p>

<h3 id='warzone_2100_'>Warzone 2100 <div class='game onRight'>(7/10)</div></h3>

<p>Strategy game like Starcraft or Command and Conquer. It is in 3d and runs fast on my machine. The battles can really make fun and the AI is sometimes very clever. It has previously been developed by Pumpkin Studios and published by Eidos before it was GPLed. <a href='http://warzone2100.strategyplanet.gamespy.com/'>Look here</a>.</p>

<h3 id='tremolous_'>Tremolous <div class='game onRight'>(6/10)</div></h3>

<p>Another shooter that wants to bring in some new ideas into the genre. Don&#8217;t expect to much because it is in an early stage. You can already play via network but there should be single player mode. It is based on <a href='http://www.icculus.org/quake3/'>Quake3</a> and it was the first game using its source code since it now is published under GnuGPL. <a href='http://www.tremulous.net/'>Here is the offical page</a>.</p>
<script type='text/javascript'>
$(document).ready(function() {
	$('.game').ratingbar({		
		textMarkup: "<div class='ratingbar_text onLeft' />",
		animate:	true,
		duration:	1000,
		ease:		"easeOutBounce"
	});
});
</script>
]]></content:encoded>
		</item>
	

	</channel>
</rss>